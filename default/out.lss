
out:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000005d6  0000066a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d7  00800122  00800122  0000068c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001f1  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f3  00000000  00000000  000008bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d2  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000644  00000000  00000000  00001382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000266  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027f  00000000  00000000  00001d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000201d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_1>
   8:	0c 94 b5 01 	jmp	0x36a	; 0x36a <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_30>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	18 e0       	ldi	r17, 0x08	; 8
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 3f       	cpi	r26, 0xF9	; 249
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 10 01 	call	0x220	; 0x220 <main>
  c6:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Hw_Init>:

}

void Hw_Init(void)
{
  sei();        //enable all interrupts 
  ce:	78 94       	sei
}
  d0:	08 95       	ret

000000d2 <UART0_Init>:

void UART0_Init(void)
{
  UBRR0H = 0;//baud = 9600!!
  d2:	10 92 90 00 	sts	0x0090, r1
  UBRR0L = 207;//baud = 9600!
  d6:	8f ec       	ldi	r24, 0xCF	; 207
  d8:	89 b9       	out	0x09, r24	; 9
  UCSR0A = 0x02;                  //asynchronous normal mode
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	8b b9       	out	0x0b, r24	; 11
  UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //interrupt, Rx/Tx enable
  de:	88 e9       	ldi	r24, 0x98	; 152
  e0:	8a b9       	out	0x0a, r24	; 10
  UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);//no parity, 1 stop, 8 data
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 95 00 	sts	0x0095, r24
}
  e8:	08 95       	ret

000000ea <UART1_Init>:

void UART1_Init(void)
{
  UBRR1H = 0;//baud = 9600!!
  ea:	10 92 98 00 	sts	0x0098, r1
  UBRR1L = 207;//baud = 9600!!
  ee:	8f ec       	ldi	r24, 0xCF	; 207
  f0:	80 93 99 00 	sts	0x0099, r24
  UCSR1A = 0x02;                  //asynchronous normal mode
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 9b 00 	sts	0x009B, r24
  UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1); //interrupt, Rx/Tx enable
  fa:	88 e9       	ldi	r24, 0x98	; 152
  fc:	80 93 9a 00 	sts	0x009A, r24
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	80 93 9d 00 	sts	0x009D, r24
}
 106:	08 95       	ret

00000108 <UART0_Read_Byte>:

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 108:	5d 9b       	sbis	0x0b, 5	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <UART0_Read_Byte>
  UDR0 = data;                    //put data into buffer, send the data
 10c:	8c b9       	out	0x0c, r24	; 12
}
 10e:	08 95       	ret

00000110 <UART1_Read_Byte>:

void UART1_Read_Byte(unsigned char data)
{
 110:	98 2f       	mov	r25, r24
  while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 112:	80 91 9b 00 	lds	r24, 0x009B
 116:	85 ff       	sbrs	r24, 5
 118:	fc cf       	rjmp	.-8      	; 0x112 <UART1_Read_Byte+0x2>
  UDR1 = data;                    //put data into buffer, send the data
 11a:	90 93 9c 00 	sts	0x009C, r25
}
 11e:	08 95       	ret

00000120 <print>:

void print(unsigned char *message)
{
 120:	fc 01       	movw	r30, r24
 122:	0a c0       	rjmp	.+20     	; 0x138 <print+0x18>
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 124:	5d 9b       	sbis	0x0b, 5	; 11
 126:	fe cf       	rjmp	.-4      	; 0x124 <print+0x4>
  UDR0 = data;                    //put data into buffer, send the data
 128:	9c b9       	out	0x0c, r25	; 12
}

void UART1_Read_Byte(unsigned char data)
{
  while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 12a:	80 91 9b 00 	lds	r24, 0x009B
 12e:	85 ff       	sbrs	r24, 5
 130:	fc cf       	rjmp	.-8      	; 0x12a <print+0xa>
  UDR1 = data;                    //put data into buffer, send the data
 132:	90 93 9c 00 	sts	0x009C, r25
void print(unsigned char *message)
{
  while(*message != '\0'){
    UART0_Read_Byte(*message);
    UART1_Read_Byte(*message);
    message++;
 136:	31 96       	adiw	r30, 0x01	; 1
  UDR1 = data;                    //put data into buffer, send the data
}

void print(unsigned char *message)
{
  while(*message != '\0'){
 138:	90 81       	ld	r25, Z
 13a:	99 23       	and	r25, r25
 13c:	99 f7       	brne	.-26     	; 0x124 <print+0x4>
 13e:	07 c0       	rjmp	.+14     	; 0x14e <print+0x2e>
  UDR0 = data;                    //put data into buffer, send the data
}

void UART1_Read_Byte(unsigned char data)
{
  while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 140:	80 91 9b 00 	lds	r24, 0x009B
 144:	85 ff       	sbrs	r24, 5
 146:	fc cf       	rjmp	.-8      	; 0x140 <print+0x20>
  UDR1 = data;                    //put data into buffer, send the data
 148:	90 93 9c 00 	sts	0x009C, r25
    message++;
  }
	
  while(*message != '\0'){
    UART1_Read_Byte(*message);
    message++;
 14c:	31 96       	adiw	r30, 0x01	; 1
    UART0_Read_Byte(*message);
    UART1_Read_Byte(*message);
    message++;
  }
	
  while(*message != '\0'){
 14e:	90 81       	ld	r25, Z
 150:	99 23       	and	r25, r25
 152:	b1 f7       	brne	.-20     	; 0x140 <print+0x20>
    UART1_Read_Byte(*message);
    message++;
  }
}
 154:	08 95       	ret

00000156 <UI_Handler>:

void UI_Handler(unsigned char *qdata)
{
  if(receive_completion){
 156:	80 91 28 01 	lds	r24, 0x0128
 15a:	88 23       	and	r24, r24
 15c:	69 f1       	breq	.+90     	; 0x1b8 <UI_Handler+0x62>
    receive_completion = 0;
 15e:	10 92 28 01 	sts	0x0128, r1
    switch(receive_data){
 162:	80 91 27 01 	lds	r24, 0x0127
 166:	8a 30       	cpi	r24, 0x0A	; 10
 168:	49 f0       	breq	.+18     	; 0x17c <UI_Handler+0x26>
 16a:	8d 30       	cpi	r24, 0x0D	; 13
 16c:	a1 f4       	brne	.+40     	; 0x196 <UI_Handler+0x40>
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 16e:	5d 9b       	sbis	0x0b, 5	; 11
 170:	fe cf       	rjmp	.-4      	; 0x16e <UI_Handler+0x18>
  UDR0 = data;                    //put data into buffer, send the data
 172:	8d e0       	ldi	r24, 0x0D	; 13
 174:	8c b9       	out	0x0c, r24	; 12
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 176:	5d 9b       	sbis	0x0b, 5	; 11
 178:	fe cf       	rjmp	.-4      	; 0x176 <UI_Handler+0x20>
 17a:	06 c0       	rjmp	.+12     	; 0x188 <UI_Handler+0x32>
  UDR0 = data;                    //put data into buffer, send the data
 17c:	5d 9b       	sbis	0x0b, 5	; 11
 17e:	fe cf       	rjmp	.-4      	; 0x17c <UI_Handler+0x26>
 180:	8d e0       	ldi	r24, 0x0D	; 13
 182:	8c b9       	out	0x0c, r24	; 12
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 184:	5d 9b       	sbis	0x0b, 5	; 11
 186:	fe cf       	rjmp	.-4      	; 0x184 <UI_Handler+0x2e>
  UDR0 = data;                    //put data into buffer, send the data
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	8c b9       	out	0x0c, r24	; 12
    switch(receive_data){
        case '\r' : UART0_Read_Byte('\r'); UART0_Read_Byte('\n');
                    print(prompt);
                    break;
        case '\n' : UART0_Read_Byte('\r'); UART0_Read_Byte('\n');
                    print(prompt);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 90 00 	call	0x120	; 0x120 <print>
 194:	08 95       	ret
                    break;
        default   : UART0_Read_Byte(receive_data);
 196:	80 91 27 01 	lds	r24, 0x0127
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 19a:	5d 9b       	sbis	0x0b, 5	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <UI_Handler+0x44>
  UDR0 = data;                    //put data into buffer, send the data
 19e:	8c b9       	out	0x0c, r24	; 12
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 1a0:	5d 9b       	sbis	0x0b, 5	; 11
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <UI_Handler+0x4a>
  UDR0 = data;                    //put data into buffer, send the data
 1a4:	8d e0       	ldi	r24, 0x0D	; 13
 1a6:	8c b9       	out	0x0c, r24	; 12
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 1a8:	5d 9b       	sbis	0x0b, 5	; 11
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <UI_Handler+0x52>
  UDR0 = data;                    //put data into buffer, send the data
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	8c b9       	out	0x0c, r24	; 12
        case '\n' : UART0_Read_Byte('\r'); UART0_Read_Byte('\n');
                    print(prompt);
                    break;
        default   : UART0_Read_Byte(receive_data);
                    UART0_Read_Byte('\r'); UART0_Read_Byte('\n');
                    print(prompt);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 90 00 	call	0x120	; 0x120 <print>
 1b8:	08 95       	ret

000001ba <__vector_18>:
  }
  return;
}

SIGNAL(SIG_UART0_RECV)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	8f 93       	push	r24
  receive_data = UDR0;
 1c6:	8c b1       	in	r24, 0x0c	; 12
 1c8:	80 93 27 01 	sts	0x0127, r24
  receive_completion = 1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 28 01 	sts	0x0128, r24
}
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_30>:


SIGNAL(SIG_UART1_RECV)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
  //unsigned char ret = 0;
  //ret = rbuf[rx_out];

  receive_data = UDR1;
 1ea:	80 91 9c 00 	lds	r24, 0x009C
 1ee:	80 93 27 01 	sts	0x0127, r24
  PORTA = ~PORTA;
 1f2:	8b b3       	in	r24, 0x1b	; 27
 1f4:	80 95       	com	r24
 1f6:	8b bb       	out	0x1b, r24	; 27
  receive_completion = 1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 28 01 	sts	0x0128, r24
}
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <Timer_Init>:



void Timer_Init(void)//1초를 만들기 위해서 타이머카운트 인터럽트를 사용합니다. 
{ 
  TCCR0 = 0x07; 
 20a:	97 e0       	ldi	r25, 0x07	; 7
 20c:	93 bf       	out	0x33, r25	; 51
  TCNT0 = 0x70; //{(0xff-0x70)+1} * 126 * (1/16Mhz) = 10ms 
 20e:	80 e7       	ldi	r24, 0x70	; 112
 210:	82 bf       	out	0x32, r24	; 50
  TCCR2 = 0x07; 
 212:	95 bd       	out	0x25, r25	; 37
  TCNT2 = 0x70; //{(0xff-0x70)+1} * 126 * (1/16Mhz) = 10ms 
 214:	84 bd       	out	0x24, r24	; 36
  TIMSK = 0x41; 
 216:	81 e4       	ldi	r24, 0x41	; 65
 218:	87 bf       	out	0x37, r24	; 55
  TIFR = 0x40; 
 21a:	80 e4       	ldi	r24, 0x40	; 64
 21c:	86 bf       	out	0x36, r24	; 54
} 
 21e:	08 95       	ret

00000220 <main>:
  UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);//no parity, 1 stop, 8 data
}

void UART1_Init(void)
{
  UBRR1H = 0;//baud = 9600!!
 220:	10 92 98 00 	sts	0x0098, r1
  UBRR1L = 207;//baud = 9600!!
 224:	3f ec       	ldi	r19, 0xCF	; 207
 226:	30 93 99 00 	sts	0x0099, r19
  UCSR1A = 0x02;                  //asynchronous normal mode
 22a:	22 e0       	ldi	r18, 0x02	; 2
 22c:	20 93 9b 00 	sts	0x009B, r18
  UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1); //interrupt, Rx/Tx enable
 230:	98 e9       	ldi	r25, 0x98	; 152
 232:	90 93 9a 00 	sts	0x009A, r25
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	80 93 9d 00 	sts	0x009D, r24
  sei();        //enable all interrupts 
}

void UART0_Init(void)
{
  UBRR0H = 0;//baud = 9600!!
 23c:	10 92 90 00 	sts	0x0090, r1
  UBRR0L = 207;//baud = 9600!
 240:	39 b9       	out	0x09, r19	; 9
  UCSR0A = 0x02;                  //asynchronous normal mode
 242:	2b b9       	out	0x0b, r18	; 11
  UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //interrupt, Rx/Tx enable
 244:	9a b9       	out	0x0a, r25	; 10
  UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);//no parity, 1 stop, 8 data
 246:	80 93 95 00 	sts	0x0095, r24

}

void Hw_Init(void)
{
  sei();        //enable all interrupts 
 24a:	78 94       	sei
{
  //unsigned char qdata[QBUFFER];
  UART1_Init();  // baud rate : 9600
  UART0_Init();  // baud rate : 9600
  Hw_Init();
  Timer_Init();
 24c:	0e 94 05 01 	call	0x20a	; 0x20a <Timer_Init>
  print(prompt);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 90 00 	call	0x120	; 0x120 <print>
 258:	28 ee       	ldi	r18, 0xE8	; 232
 25a:	33 e0       	ldi	r19, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 25c:	40 e9       	ldi	r20, 0x90	; 144
 25e:	51 e0       	ldi	r21, 0x01	; 1
 260:	05 c0       	rjmp	.+10     	; 0x26c <main+0x4c>
 262:	ca 01       	movw	r24, r20
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <main+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26c:	21 15       	cp	r18, r1
 26e:	31 05       	cpc	r19, r1
 270:	c1 f7       	brne	.-16     	; 0x262 <main+0x42>
    
    do{
		_delay_ms(100);
		PORTA = ~PORTA;
 272:	8b b3       	in	r24, 0x1b	; 27
 274:	80 95       	com	r24
 276:	8b bb       	out	0x1b, r24	; 27
 278:	28 ee       	ldi	r18, 0xE8	; 232
 27a:	33 e0       	ldi	r19, 0x03	; 3
 27c:	f2 cf       	rjmp	.-28     	; 0x262 <main+0x42>

0000027e <__vector_16>:

//======================================
//Timer0 
//======================================
SIGNAL(SIG_OVERFLOW0)//timer0 Overflow interrupt 
{ 
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	0b b6       	in	r0, 0x3b	; 59
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
 2a4:	df 93       	push	r29
 2a6:	cf 93       	push	r28
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
  unsigned char ret = 0;
  unsigned char ptr;
  Tii_count--; ms++; 
 2ae:	80 91 22 01 	lds	r24, 0x0122
 2b2:	81 50       	subi	r24, 0x01	; 1
 2b4:	80 93 22 01 	sts	0x0122, r24
 2b8:	80 91 24 01 	lds	r24, 0x0124
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	80 93 24 01 	sts	0x0124, r24
  if(!Tii_count){//10ms * 100 = 1000ms delay = 1s 
 2c2:	80 91 22 01 	lds	r24, 0x0122
 2c6:	88 23       	and	r24, r24
 2c8:	01 f5       	brne	.+64     	; 0x30a <__vector_16+0x8c>
    Tii_count = 100; ss++; ms=0; 
 2ca:	84 e6       	ldi	r24, 0x64	; 100
 2cc:	80 93 22 01 	sts	0x0122, r24
 2d0:	80 91 23 01 	lds	r24, 0x0123
 2d4:	8f 5f       	subi	r24, 0xFF	; 255
 2d6:	80 93 23 01 	sts	0x0123, r24
 2da:	10 92 24 01 	sts	0x0124, r1
	PORTB = ~PORTB;
 2de:	88 b3       	in	r24, 0x18	; 24
 2e0:	80 95       	com	r24
 2e2:	88 bb       	out	0x18, r24	; 24
//======================================
//Timer0 
//======================================
SIGNAL(SIG_OVERFLOW0)//timer0 Overflow interrupt 
{ 
  unsigned char ret = 0;
 2e4:	19 82       	std	Y+1, r1	; 0x01
  unsigned char ptr;
  Tii_count--; ms++; 
  if(!Tii_count){//10ms * 100 = 1000ms delay = 1s 
    Tii_count = 100; ss++; ms=0; 
	PORTB = ~PORTB;
    print(str1);
 2e6:	8c e0       	ldi	r24, 0x0C	; 12
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 90 00 	call	0x120	; 0x120 <print>
    ret =(unsigned char)PORTC;
 2ee:	25 b3       	in	r18, 0x15	; 21
  UDR0 = data;                    //put data into buffer, send the data
}

void UART1_Read_Byte(unsigned char data)
{
  while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 2f0:	80 91 9b 00 	lds	r24, 0x009B
 2f4:	85 ff       	sbrs	r24, 5
 2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <__vector_16+0x72>
  if(!Tii_count){//10ms * 100 = 1000ms delay = 1s 
    Tii_count = 100; ss++; ms=0; 
	PORTB = ~PORTB;
    print(str1);
    ret =(unsigned char)PORTC;
    ptr = &ret;
 2f8:	ce 01       	movw	r24, r28
 2fa:	01 96       	adiw	r24, 0x01	; 1
}

void UART1_Read_Byte(unsigned char data)
{
  while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
  UDR1 = data;                    //put data into buffer, send the data
 2fc:	80 93 9c 00 	sts	0x009C, r24
  Tii_count--; ms++; 
  if(!Tii_count){//10ms * 100 = 1000ms delay = 1s 
    Tii_count = 100; ss++; ms=0; 
	PORTB = ~PORTB;
    print(str1);
    ret =(unsigned char)PORTC;
 300:	29 83       	std	Y+1, r18	; 0x01
    ptr = &ret;
	UART1_Read_Byte(ptr);
	print(str2);
 302:	8f e1       	ldi	r24, 0x1F	; 31
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 90 00 	call	0x120	; 0x120 <print>
  } 
  TCNT0 = 0x70; 
 30a:	80 e7       	ldi	r24, 0x70	; 112
 30c:	82 bf       	out	0x32, r24	; 50
} 
 30e:	0f 90       	pop	r0
 310:	cf 91       	pop	r28
 312:	df 91       	pop	r29
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	3f 91       	pop	r19
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0b be       	out	0x3b, r0	; 59
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <__vector_10>:

//======================================
//Timer1 
//======================================
SIGNAL(SIG_OVERFLOW2)//timer1 Overflow interrupt 
{ 
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	8f 93       	push	r24
  
  TCNT2 = 0x70; 
 346:	80 e7       	ldi	r24, 0x70	; 112
 348:	84 bd       	out	0x24, r24	; 36
} 
 34a:	8f 91       	pop	r24
 34c:	0f 90       	pop	r0
 34e:	0f be       	out	0x3f, r0	; 63
 350:	0f 90       	pop	r0
 352:	1f 90       	pop	r1
 354:	18 95       	reti

00000356 <__vector_1>:
  
//====================================== 
//Exint0
//====================================== 
SIGNAL(SIG_INTERRUPT0)//Exint0 Overflow interrupt 
{
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
  //@@@
} 
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <__vector_2>:

//======================================
//Exint1
//======================================  
SIGNAL(SIG_INTERRUPT1) 
{ 
 36a:	1f 92       	push	r1
 36c:	0f 92       	push	r0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	0f 92       	push	r0
 372:	11 24       	eor	r1, r1
  //@@@
}
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <qbufferInit>:
#include "qbuffer.h"

void qbufferInit(void)
{

}
 37e:	08 95       	ret

00000380 <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 380:	fc 01       	movw	r30, r24
  bool ret = true;


  p_node->ptr_in  = 0;
 382:	10 82       	st	Z, r1
 384:	11 82       	std	Z+1, r1	; 0x01
 386:	12 82       	std	Z+2, r1	; 0x02
 388:	13 82       	std	Z+3, r1	; 0x03
  p_node->ptr_out = 0;
 38a:	14 82       	std	Z+4, r1	; 0x04
 38c:	15 82       	std	Z+5, r1	; 0x05
 38e:	16 82       	std	Z+6, r1	; 0x06
 390:	17 82       	std	Z+7, r1	; 0x07
  p_node->length  = length;
 392:	20 87       	std	Z+8, r18	; 0x08
 394:	31 87       	std	Z+9, r19	; 0x09
 396:	42 87       	std	Z+10, r20	; 0x0a
 398:	53 87       	std	Z+11, r21	; 0x0b
  p_node->p_buf   = p_buf;
 39a:	75 87       	std	Z+13, r23	; 0x0d
 39c:	64 87       	std	Z+12, r22	; 0x0c

  if (p_node->p_buf == NULL)
 39e:	67 2b       	or	r22, r23
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <qbufferCreate+0x26>
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	08 95       	ret
  {
    p_node->length = 0;
 3a6:	10 86       	std	Z+8, r1	; 0x08
 3a8:	11 86       	std	Z+9, r1	; 0x09
 3aa:	12 86       	std	Z+10, r1	; 0x0a
 3ac:	13 86       	std	Z+11, r1	; 0x0b
 3ae:	80 e0       	ldi	r24, 0x00	; 0
    ret = false;
  }

  return ret;
}
 3b0:	08 95       	ret

000003b2 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 3b2:	6f 92       	push	r6
 3b4:	7f 92       	push	r7
 3b6:	8f 92       	push	r8
 3b8:	9f 92       	push	r9
 3ba:	af 92       	push	r10
 3bc:	bf 92       	push	r11
 3be:	cf 92       	push	r12
 3c0:	df 92       	push	r13
 3c2:	ef 92       	push	r14
 3c4:	ff 92       	push	r15
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	ec 01       	movw	r28, r24
 3d0:	39 01       	movw	r6, r18
 3d2:	4a 01       	movw	r8, r20
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if (p_node->p_buf == NULL) return false;
 3d4:	8c 85       	ldd	r24, Y+12	; 0x0c
 3d6:	9d 85       	ldd	r25, Y+13	; 0x0d
 3d8:	89 2b       	or	r24, r25
 3da:	e9 f1       	breq	.+122    	; 0x456 <qbufferWrite+0xa4>
 3dc:	ee 24       	eor	r14, r14
 3de:	ff 24       	eor	r15, r15
 3e0:	87 01       	movw	r16, r14
 3e2:	32 c0       	rjmp	.+100    	; 0x448 <qbufferWrite+0x96>


  for (i=0; i<length; i++)
  {
    index      = p_node->ptr_in;
 3e4:	a8 80       	ld	r10, Y
 3e6:	b9 80       	ldd	r11, Y+1	; 0x01
 3e8:	ca 80       	ldd	r12, Y+2	; 0x02
 3ea:	db 80       	ldd	r13, Y+3	; 0x03
    next_index = p_node->ptr_in + 1;
 3ec:	a6 01       	movw	r20, r12
 3ee:	95 01       	movw	r18, r10
 3f0:	2f 5f       	subi	r18, 0xFF	; 255
 3f2:	3f 4f       	sbci	r19, 0xFF	; 255
 3f4:	4f 4f       	sbci	r20, 0xFF	; 255
 3f6:	5f 4f       	sbci	r21, 0xFF	; 255

    if (next_index == p_node->length)
 3f8:	88 85       	ldd	r24, Y+8	; 0x08
 3fa:	99 85       	ldd	r25, Y+9	; 0x09
 3fc:	aa 85       	ldd	r26, Y+10	; 0x0a
 3fe:	bb 85       	ldd	r27, Y+11	; 0x0b
 400:	28 17       	cp	r18, r24
 402:	39 07       	cpc	r19, r25
 404:	4a 07       	cpc	r20, r26
 406:	5b 07       	cpc	r21, r27
 408:	21 f4       	brne	.+8      	; 0x412 <qbufferWrite+0x60>
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	50 e0       	ldi	r21, 0x00	; 0
    {
      next_index = 0;;
    }

    if (next_index != p_node->ptr_out)
 412:	8c 81       	ldd	r24, Y+4	; 0x04
 414:	9d 81       	ldd	r25, Y+5	; 0x05
 416:	ae 81       	ldd	r26, Y+6	; 0x06
 418:	bf 81       	ldd	r27, Y+7	; 0x07
 41a:	28 17       	cp	r18, r24
 41c:	39 07       	cpc	r19, r25
 41e:	4a 07       	cpc	r20, r26
 420:	5b 07       	cpc	r21, r27
 422:	c9 f0       	breq	.+50     	; 0x456 <qbufferWrite+0xa4>
    {
      p_node->p_buf[index] = p_data[i];
 424:	ec 85       	ldd	r30, Y+12	; 0x0c
 426:	fd 85       	ldd	r31, Y+13	; 0x0d
 428:	ea 0d       	add	r30, r10
 42a:	fb 1d       	adc	r31, r11
 42c:	db 01       	movw	r26, r22
 42e:	ae 0d       	add	r26, r14
 430:	bf 1d       	adc	r27, r15
 432:	8c 91       	ld	r24, X
 434:	80 83       	st	Z, r24
      p_node->ptr_in       = next_index;
 436:	28 83       	st	Y, r18
 438:	39 83       	std	Y+1, r19	; 0x01
 43a:	4a 83       	std	Y+2, r20	; 0x02
 43c:	5b 83       	std	Y+3, r21	; 0x03
  uint32_t i;

  if (p_node->p_buf == NULL) return false;


  for (i=0; i<length; i++)
 43e:	08 94       	sec
 440:	e1 1c       	adc	r14, r1
 442:	f1 1c       	adc	r15, r1
 444:	01 1d       	adc	r16, r1
 446:	11 1d       	adc	r17, r1
 448:	e6 14       	cp	r14, r6
 44a:	f7 04       	cpc	r15, r7
 44c:	08 05       	cpc	r16, r8
 44e:	19 05       	cpc	r17, r9
 450:	48 f2       	brcs	.-110    	; 0x3e4 <qbufferWrite+0x32>
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	01 c0       	rjmp	.+2      	; 0x458 <qbufferWrite+0xa6>
 456:	80 e0       	ldi	r24, 0x00	; 0
      break;
    }
  }

  return ret;
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	bf 90       	pop	r11
 46a:	af 90       	pop	r10
 46c:	9f 90       	pop	r9
 46e:	8f 90       	pop	r8
 470:	7f 90       	pop	r7
 472:	6f 90       	pop	r6
 474:	08 95       	ret

00000476 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 476:	6f 92       	push	r6
 478:	7f 92       	push	r7
 47a:	8f 92       	push	r8
 47c:	9f 92       	push	r9
 47e:	af 92       	push	r10
 480:	bf 92       	push	r11
 482:	cf 92       	push	r12
 484:	df 92       	push	r13
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	ec 01       	movw	r28, r24
 494:	39 01       	movw	r6, r18
 496:	4a 01       	movw	r8, r20
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if (p_node->p_buf == NULL) return false;
 498:	8c 85       	ldd	r24, Y+12	; 0x0c
 49a:	9d 85       	ldd	r25, Y+13	; 0x0d
 49c:	89 2b       	or	r24, r25
 49e:	e9 f1       	breq	.+122    	; 0x51a <qbufferRead+0xa4>
 4a0:	aa 24       	eor	r10, r10
 4a2:	bb 24       	eor	r11, r11
 4a4:	65 01       	movw	r12, r10
 4a6:	32 c0       	rjmp	.+100    	; 0x50c <qbufferRead+0x96>


  for (i=0; i<length; i++)
  {
    index      = p_node->ptr_out;
 4a8:	2c 81       	ldd	r18, Y+4	; 0x04
 4aa:	3d 81       	ldd	r19, Y+5	; 0x05
 4ac:	4e 81       	ldd	r20, Y+6	; 0x06
 4ae:	5f 81       	ldd	r21, Y+7	; 0x07
    next_index = p_node->ptr_out + 1;
 4b0:	79 01       	movw	r14, r18
 4b2:	8a 01       	movw	r16, r20
 4b4:	08 94       	sec
 4b6:	e1 1c       	adc	r14, r1
 4b8:	f1 1c       	adc	r15, r1
 4ba:	01 1d       	adc	r16, r1
 4bc:	11 1d       	adc	r17, r1

    if (next_index == p_node->length)
 4be:	88 85       	ldd	r24, Y+8	; 0x08
 4c0:	99 85       	ldd	r25, Y+9	; 0x09
 4c2:	aa 85       	ldd	r26, Y+10	; 0x0a
 4c4:	bb 85       	ldd	r27, Y+11	; 0x0b
 4c6:	e8 16       	cp	r14, r24
 4c8:	f9 06       	cpc	r15, r25
 4ca:	0a 07       	cpc	r16, r26
 4cc:	1b 07       	cpc	r17, r27
 4ce:	19 f4       	brne	.+6      	; 0x4d6 <qbufferRead+0x60>
 4d0:	ee 24       	eor	r14, r14
 4d2:	ff 24       	eor	r15, r15
 4d4:	87 01       	movw	r16, r14
    {
      next_index = 0;
    }

    if (index != p_node->ptr_in)
 4d6:	88 81       	ld	r24, Y
 4d8:	99 81       	ldd	r25, Y+1	; 0x01
 4da:	aa 81       	ldd	r26, Y+2	; 0x02
 4dc:	bb 81       	ldd	r27, Y+3	; 0x03
 4de:	28 17       	cp	r18, r24
 4e0:	39 07       	cpc	r19, r25
 4e2:	4a 07       	cpc	r20, r26
 4e4:	5b 07       	cpc	r21, r27
 4e6:	c9 f0       	breq	.+50     	; 0x51a <qbufferRead+0xa4>
    {
      p_data[i]       = p_node->p_buf[index];
 4e8:	fb 01       	movw	r30, r22
 4ea:	ea 0d       	add	r30, r10
 4ec:	fb 1d       	adc	r31, r11
 4ee:	ac 85       	ldd	r26, Y+12	; 0x0c
 4f0:	bd 85       	ldd	r27, Y+13	; 0x0d
 4f2:	a2 0f       	add	r26, r18
 4f4:	b3 1f       	adc	r27, r19
 4f6:	8c 91       	ld	r24, X
 4f8:	80 83       	st	Z, r24
      p_node->ptr_out = next_index;
 4fa:	ec 82       	std	Y+4, r14	; 0x04
 4fc:	fd 82       	std	Y+5, r15	; 0x05
 4fe:	0e 83       	std	Y+6, r16	; 0x06
 500:	1f 83       	std	Y+7, r17	; 0x07
  uint32_t i;

  if (p_node->p_buf == NULL) return false;


  for (i=0; i<length; i++)
 502:	08 94       	sec
 504:	a1 1c       	adc	r10, r1
 506:	b1 1c       	adc	r11, r1
 508:	c1 1c       	adc	r12, r1
 50a:	d1 1c       	adc	r13, r1
 50c:	a6 14       	cp	r10, r6
 50e:	b7 04       	cpc	r11, r7
 510:	c8 04       	cpc	r12, r8
 512:	d9 04       	cpc	r13, r9
 514:	48 f2       	brcs	.-110    	; 0x4a8 <qbufferRead+0x32>
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	01 c0       	rjmp	.+2      	; 0x51c <qbufferRead+0xa6>
 51a:	80 e0       	ldi	r24, 0x00	; 0
      break;
    }
  }

  return ret;
}
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	0f 91       	pop	r16
 524:	ff 90       	pop	r15
 526:	ef 90       	pop	r14
 528:	df 90       	pop	r13
 52a:	cf 90       	pop	r12
 52c:	bf 90       	pop	r11
 52e:	af 90       	pop	r10
 530:	9f 90       	pop	r9
 532:	8f 90       	pop	r8
 534:	7f 90       	pop	r7
 536:	6f 90       	pop	r6
 538:	08 95       	ret

0000053a <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 53a:	ef 92       	push	r14
 53c:	ff 92       	push	r15
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	fc 01       	movw	r30, r24
  uint32_t length;


  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 544:	20 85       	ldd	r18, Z+8	; 0x08
 546:	31 85       	ldd	r19, Z+9	; 0x09
 548:	42 85       	ldd	r20, Z+10	; 0x0a
 54a:	53 85       	ldd	r21, Z+11	; 0x0b
 54c:	60 81       	ld	r22, Z
 54e:	71 81       	ldd	r23, Z+1	; 0x01
 550:	82 81       	ldd	r24, Z+2	; 0x02
 552:	93 81       	ldd	r25, Z+3	; 0x03
 554:	62 0f       	add	r22, r18
 556:	73 1f       	adc	r23, r19
 558:	84 1f       	adc	r24, r20
 55a:	95 1f       	adc	r25, r21
 55c:	e4 80       	ldd	r14, Z+4	; 0x04
 55e:	f5 80       	ldd	r15, Z+5	; 0x05
 560:	06 81       	ldd	r16, Z+6	; 0x06
 562:	17 81       	ldd	r17, Z+7	; 0x07
 564:	6e 19       	sub	r22, r14
 566:	7f 09       	sbc	r23, r15
 568:	80 0b       	sbc	r24, r16
 56a:	91 0b       	sbc	r25, r17
 56c:	0e 94 c7 02 	call	0x58e	; 0x58e <__udivmodsi4>

  return length;
}
 570:	1f 91       	pop	r17
 572:	0f 91       	pop	r16
 574:	ff 90       	pop	r15
 576:	ef 90       	pop	r14
 578:	08 95       	ret

0000057a <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node)
{
 57a:	fc 01       	movw	r30, r24
  p_node->ptr_in  = 0;
 57c:	10 82       	st	Z, r1
 57e:	11 82       	std	Z+1, r1	; 0x01
 580:	12 82       	std	Z+2, r1	; 0x02
 582:	13 82       	std	Z+3, r1	; 0x03
  p_node->ptr_out = 0;
 584:	14 82       	std	Z+4, r1	; 0x04
 586:	15 82       	std	Z+5, r1	; 0x05
 588:	16 82       	std	Z+6, r1	; 0x06
 58a:	17 82       	std	Z+7, r1	; 0x07
}
 58c:	08 95       	ret

0000058e <__udivmodsi4>:
 58e:	a1 e2       	ldi	r26, 0x21	; 33
 590:	1a 2e       	mov	r1, r26
 592:	aa 1b       	sub	r26, r26
 594:	bb 1b       	sub	r27, r27
 596:	fd 01       	movw	r30, r26
 598:	0d c0       	rjmp	.+26     	; 0x5b4 <__udivmodsi4_ep>

0000059a <__udivmodsi4_loop>:
 59a:	aa 1f       	adc	r26, r26
 59c:	bb 1f       	adc	r27, r27
 59e:	ee 1f       	adc	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	a2 17       	cp	r26, r18
 5a4:	b3 07       	cpc	r27, r19
 5a6:	e4 07       	cpc	r30, r20
 5a8:	f5 07       	cpc	r31, r21
 5aa:	20 f0       	brcs	.+8      	; 0x5b4 <__udivmodsi4_ep>
 5ac:	a2 1b       	sub	r26, r18
 5ae:	b3 0b       	sbc	r27, r19
 5b0:	e4 0b       	sbc	r30, r20
 5b2:	f5 0b       	sbc	r31, r21

000005b4 <__udivmodsi4_ep>:
 5b4:	66 1f       	adc	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	1a 94       	dec	r1
 5be:	69 f7       	brne	.-38     	; 0x59a <__udivmodsi4_loop>
 5c0:	60 95       	com	r22
 5c2:	70 95       	com	r23
 5c4:	80 95       	com	r24
 5c6:	90 95       	com	r25
 5c8:	9b 01       	movw	r18, r22
 5ca:	ac 01       	movw	r20, r24
 5cc:	bd 01       	movw	r22, r26
 5ce:	cf 01       	movw	r24, r30
 5d0:	08 95       	ret

000005d2 <_exit>:
 5d2:	f8 94       	cli

000005d4 <__stop_program>:
 5d4:	ff cf       	rjmp	.-2      	; 0x5d4 <__stop_program>
