
as.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000004b2  00000546  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011e  0080011e  00000564  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000134  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000665  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000027c  00000000  00000000  00000d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f9  00000000  00000000  00000fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000014b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e7  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000026c  00000000  00000000  0000179b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001a07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_30>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  c6:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <USART_Init>:
    }while(1);
}

void USART_Init(void)
{
    UBRR0H = 0;//baud = 9600!!
  ce:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 207;//baud = 9600!!
  d2:	3f ec       	ldi	r19, 0xCF	; 207
  d4:	39 b9       	out	0x09, r19	; 9
    UCSR0A = 0x02;                  //asynchronous normal mode
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	2b b9       	out	0x0b, r18	; 11
    UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //interrupt, Rx/Tx enable
  da:	98 e9       	ldi	r25, 0x98	; 152
  dc:	9a b9       	out	0x0a, r25	; 10
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);//no parity, 1 stop, 8 data
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 95 00 	sts	0x0095, r24
	
	UBRR1H = 0;//baud = 9600!!
  e4:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = 207;//baud = 9600!!
  e8:	30 93 99 00 	sts	0x0099, r19
    UCSR1A = 0x02;                  //asynchronous normal mode
  ec:	20 93 9b 00 	sts	0x009B, r18
    UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1); //interrupt, Rx/Tx enable
  f0:	90 93 9a 00 	sts	0x009A, r25
    UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
  f4:	80 93 9d 00 	sts	0x009D, r24

}
  f8:	08 95       	ret

000000fa <TX0_Byte>:

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
  fa:	5d 9b       	sbis	0x0b, 5	; 11
  fc:	fe cf       	rjmp	.-4      	; 0xfa <TX0_Byte>
    UDR0 = data;                    //put data into buffer, send the data
  fe:	8c b9       	out	0x0c, r24	; 12
}
 100:	08 95       	ret

00000102 <TX1_Byte>:

void TX1_Byte(unsigned char data)
{
 102:	98 2f       	mov	r25, r24
    while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 104:	80 91 9b 00 	lds	r24, 0x009B
 108:	85 ff       	sbrs	r24, 5
 10a:	fc cf       	rjmp	.-8      	; 0x104 <TX1_Byte+0x2>
    UDR1 = data;                    //put data into buffer, send the data
 10c:	90 93 9c 00 	sts	0x009C, r25
}
 110:	08 95       	ret

00000112 <print>:

void print(unsigned char *message)
{
 112:	fc 01       	movw	r30, r24
 114:	0a c0       	rjmp	.+20     	; 0x12a <print+0x18>

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 116:	5d 9b       	sbis	0x0b, 5	; 11
 118:	fe cf       	rjmp	.-4      	; 0x116 <print+0x4>
    UDR0 = data;                    //put data into buffer, send the data
 11a:	9c b9       	out	0x0c, r25	; 12
}

void TX1_Byte(unsigned char data)
{
    while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 11c:	80 91 9b 00 	lds	r24, 0x009B
 120:	85 ff       	sbrs	r24, 5
 122:	fc cf       	rjmp	.-8      	; 0x11c <print+0xa>
    UDR1 = data;                    //put data into buffer, send the data
 124:	90 93 9c 00 	sts	0x009C, r25
void print(unsigned char *message)
{
    while(*message != '\0'){
        TX0_Byte(*message);
        TX1_Byte(*message);
        message++;
 128:	31 96       	adiw	r30, 0x01	; 1
    UDR1 = data;                    //put data into buffer, send the data
}

void print(unsigned char *message)
{
    while(*message != '\0'){
 12a:	90 81       	ld	r25, Z
 12c:	99 23       	and	r25, r25
 12e:	99 f7       	brne	.-26     	; 0x116 <print+0x4>
 130:	07 c0       	rjmp	.+14     	; 0x140 <print+0x2e>
    UDR0 = data;                    //put data into buffer, send the data
}

void TX1_Byte(unsigned char data)
{
    while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 132:	80 91 9b 00 	lds	r24, 0x009B
 136:	85 ff       	sbrs	r24, 5
 138:	fc cf       	rjmp	.-8      	; 0x132 <print+0x20>
    UDR1 = data;                    //put data into buffer, send the data
 13a:	90 93 9c 00 	sts	0x009C, r25

    }
	
    while(*message != '\0'){
        TX1_Byte(*message);
        message++;
 13e:	31 96       	adiw	r30, 0x01	; 1
        TX1_Byte(*message);
        message++;

    }
	
    while(*message != '\0'){
 140:	90 81       	ld	r25, Z
 142:	99 23       	and	r25, r25
 144:	b1 f7       	brne	.-20     	; 0x132 <print+0x20>
        TX1_Byte(*message);
        message++;
    }
}
 146:	08 95       	ret

00000148 <UI_Handler>:

void UI_Handler(unsigned char *qdata)
{
//QBUFFER
	if(receive_completion){
 148:	80 91 1e 01 	lds	r24, 0x011E
 14c:	88 23       	and	r24, r24
 14e:	69 f1       	breq	.+90     	; 0x1aa <UI_Handler+0x62>
	    receive_completion = 0;
 150:	10 92 1e 01 	sts	0x011E, r1
        switch(receive_data){
 154:	80 91 1f 01 	lds	r24, 0x011F
 158:	8a 30       	cpi	r24, 0x0A	; 10
 15a:	49 f0       	breq	.+18     	; 0x16e <UI_Handler+0x26>
 15c:	8d 30       	cpi	r24, 0x0D	; 13
 15e:	a1 f4       	brne	.+40     	; 0x188 <UI_Handler+0x40>

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 160:	5d 9b       	sbis	0x0b, 5	; 11
 162:	fe cf       	rjmp	.-4      	; 0x160 <UI_Handler+0x18>
    UDR0 = data;                    //put data into buffer, send the data
 164:	8d e0       	ldi	r24, 0x0D	; 13
 166:	8c b9       	out	0x0c, r24	; 12

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 168:	5d 9b       	sbis	0x0b, 5	; 11
 16a:	fe cf       	rjmp	.-4      	; 0x168 <UI_Handler+0x20>
 16c:	06 c0       	rjmp	.+12     	; 0x17a <UI_Handler+0x32>
    UDR0 = data;                    //put data into buffer, send the data
 16e:	5d 9b       	sbis	0x0b, 5	; 11
 170:	fe cf       	rjmp	.-4      	; 0x16e <UI_Handler+0x26>
 172:	8d e0       	ldi	r24, 0x0D	; 13
 174:	8c b9       	out	0x0c, r24	; 12

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 176:	5d 9b       	sbis	0x0b, 5	; 11
 178:	fe cf       	rjmp	.-4      	; 0x176 <UI_Handler+0x2e>
    UDR0 = data;                    //put data into buffer, send the data
 17a:	8a e0       	ldi	r24, 0x0A	; 10
 17c:	8c b9       	out	0x0c, r24	; 12
        switch(receive_data){
            case '\r' : TX0_Byte('\r'); TX0_Byte('\n');
                        print(prompt);
                        break;
            case '\n' : TX0_Byte('\r'); TX0_Byte('\n');
                        print(prompt);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 89 00 	call	0x112	; 0x112 <print>
 186:	08 95       	ret
                        break;
            default   : TX0_Byte(receive_data);
 188:	80 91 1f 01 	lds	r24, 0x011F

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 18c:	5d 9b       	sbis	0x0b, 5	; 11
 18e:	fe cf       	rjmp	.-4      	; 0x18c <UI_Handler+0x44>
    UDR0 = data;                    //put data into buffer, send the data
 190:	8c b9       	out	0x0c, r24	; 12

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 192:	5d 9b       	sbis	0x0b, 5	; 11
 194:	fe cf       	rjmp	.-4      	; 0x192 <UI_Handler+0x4a>
    UDR0 = data;                    //put data into buffer, send the data
 196:	8d e0       	ldi	r24, 0x0D	; 13
 198:	8c b9       	out	0x0c, r24	; 12

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 19a:	5d 9b       	sbis	0x0b, 5	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <UI_Handler+0x52>
    UDR0 = data;                    //put data into buffer, send the data
 19e:	8a e0       	ldi	r24, 0x0A	; 10
 1a0:	8c b9       	out	0x0c, r24	; 12
            case '\n' : TX0_Byte('\r'); TX0_Byte('\n');
                        print(prompt);
                        break;
            default   : TX0_Byte(receive_data);
                        TX0_Byte('\r'); TX0_Byte('\n');
                        print(prompt);
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 89 00 	call	0x112	; 0x112 <print>
 1aa:	08 95       	ret

000001ac <main>:
//void PRINT_M(unsigned char *message);
void print(unsigned char *message);
void UI_Handler(unsigned char *qdata);

int main(void)
{
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	df 93       	push	r29
 1b6:	cf 93       	push	r28
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	c6 59       	subi	r28, 0x96	; 150
 1be:	d0 40       	sbci	r29, 0x00	; 0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
	unsigned char qdata[QBUFFER];
    USART_Init();  // baud rate : 9600
 1ca:	0e 94 67 00 	call	0xce	; 0xce <USART_Init>
    sei();
 1ce:	78 94       	sei
    print(prompt);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 89 00 	call	0x112	; 0x112 <print>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1d8:	80 e9       	ldi	r24, 0x90	; 144
 1da:	e8 2e       	mov	r14, r24
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	f8 2e       	mov	r15, r24
    do{
		print(str1);
		_delay_ms(1000);
		PORTA = ~PORTA;
		UI_Handler(qdata);
 1e0:	8e 01       	movw	r16, r28
 1e2:	0f 5f       	subi	r16, 0xFF	; 255
 1e4:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char qdata[QBUFFER];
    USART_Init();  // baud rate : 9600
    sei();
    print(prompt);
    do{
		print(str1);
 1e6:	8c e0       	ldi	r24, 0x0C	; 12
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 89 00 	call	0x112	; 0x112 <print>
 1ee:	80 e1       	ldi	r24, 0x10	; 16
 1f0:	97 e2       	ldi	r25, 0x27	; 39
 1f2:	f7 01       	movw	r30, r14
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fa:	d9 f7       	brne	.-10     	; 0x1f2 <main+0x46>
		_delay_ms(1000);
		PORTA = ~PORTA;
 1fc:	8b b3       	in	r24, 0x1b	; 27
 1fe:	80 95       	com	r24
 200:	8b bb       	out	0x1b, r24	; 27
		UI_Handler(qdata);
 202:	c8 01       	movw	r24, r16
 204:	0e 94 a4 00 	call	0x148	; 0x148 <UI_Handler>
 208:	ee cf       	rjmp	.-36     	; 0x1e6 <main+0x3a>

0000020a <__vector_18>:
    }
	return;
}

SIGNAL(SIG_UART0_RECV)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
    receive_data = UDR0;
 216:	8c b1       	in	r24, 0x0c	; 12
 218:	80 93 1f 01 	sts	0x011F, r24
    receive_completion = 1;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	80 93 1e 01 	sts	0x011E, r24
}
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_30>:


SIGNAL(SIG_UART1_RECV)
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
    	receive_data = UDR1;
 23a:	80 91 9c 00 	lds	r24, 0x009C
 23e:	80 93 1f 01 	sts	0x011F, r24
		PORTA = ~PORTA;
 242:	8b b3       	in	r24, 0x1b	; 27
 244:	80 95       	com	r24
 246:	8b bb       	out	0x1b, r24	; 27
		receive_completion = 1;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 1e 01 	sts	0x011E, r24
}
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <qbufferInit>:
#include "qbuffer.h"

void qbufferInit(void)
{

}
 25a:	08 95       	ret

0000025c <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 25c:	fc 01       	movw	r30, r24
  bool ret = true;


  p_node->ptr_in  = 0;
 25e:	10 82       	st	Z, r1
 260:	11 82       	std	Z+1, r1	; 0x01
 262:	12 82       	std	Z+2, r1	; 0x02
 264:	13 82       	std	Z+3, r1	; 0x03
  p_node->ptr_out = 0;
 266:	14 82       	std	Z+4, r1	; 0x04
 268:	15 82       	std	Z+5, r1	; 0x05
 26a:	16 82       	std	Z+6, r1	; 0x06
 26c:	17 82       	std	Z+7, r1	; 0x07
  p_node->length  = length;
 26e:	20 87       	std	Z+8, r18	; 0x08
 270:	31 87       	std	Z+9, r19	; 0x09
 272:	42 87       	std	Z+10, r20	; 0x0a
 274:	53 87       	std	Z+11, r21	; 0x0b
  p_node->p_buf   = p_buf;
 276:	75 87       	std	Z+13, r23	; 0x0d
 278:	64 87       	std	Z+12, r22	; 0x0c

  if (p_node->p_buf == NULL)
 27a:	67 2b       	or	r22, r23
 27c:	11 f0       	breq	.+4      	; 0x282 <qbufferCreate+0x26>
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	08 95       	ret
  {
    p_node->length = 0;
 282:	10 86       	std	Z+8, r1	; 0x08
 284:	11 86       	std	Z+9, r1	; 0x09
 286:	12 86       	std	Z+10, r1	; 0x0a
 288:	13 86       	std	Z+11, r1	; 0x0b
 28a:	80 e0       	ldi	r24, 0x00	; 0
    ret = false;
  }

  return ret;
}
 28c:	08 95       	ret

0000028e <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 28e:	6f 92       	push	r6
 290:	7f 92       	push	r7
 292:	8f 92       	push	r8
 294:	9f 92       	push	r9
 296:	af 92       	push	r10
 298:	bf 92       	push	r11
 29a:	cf 92       	push	r12
 29c:	df 92       	push	r13
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	ec 01       	movw	r28, r24
 2ac:	39 01       	movw	r6, r18
 2ae:	4a 01       	movw	r8, r20
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if (p_node->p_buf == NULL) return false;
 2b0:	8c 85       	ldd	r24, Y+12	; 0x0c
 2b2:	9d 85       	ldd	r25, Y+13	; 0x0d
 2b4:	89 2b       	or	r24, r25
 2b6:	e9 f1       	breq	.+122    	; 0x332 <qbufferWrite+0xa4>
 2b8:	ee 24       	eor	r14, r14
 2ba:	ff 24       	eor	r15, r15
 2bc:	87 01       	movw	r16, r14
 2be:	32 c0       	rjmp	.+100    	; 0x324 <qbufferWrite+0x96>


  for (i=0; i<length; i++)
  {
    index      = p_node->ptr_in;
 2c0:	a8 80       	ld	r10, Y
 2c2:	b9 80       	ldd	r11, Y+1	; 0x01
 2c4:	ca 80       	ldd	r12, Y+2	; 0x02
 2c6:	db 80       	ldd	r13, Y+3	; 0x03
    next_index = p_node->ptr_in + 1;
 2c8:	a6 01       	movw	r20, r12
 2ca:	95 01       	movw	r18, r10
 2cc:	2f 5f       	subi	r18, 0xFF	; 255
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	4f 4f       	sbci	r20, 0xFF	; 255
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255

    if (next_index == p_node->length)
 2d4:	88 85       	ldd	r24, Y+8	; 0x08
 2d6:	99 85       	ldd	r25, Y+9	; 0x09
 2d8:	aa 85       	ldd	r26, Y+10	; 0x0a
 2da:	bb 85       	ldd	r27, Y+11	; 0x0b
 2dc:	28 17       	cp	r18, r24
 2de:	39 07       	cpc	r19, r25
 2e0:	4a 07       	cpc	r20, r26
 2e2:	5b 07       	cpc	r21, r27
 2e4:	21 f4       	brne	.+8      	; 0x2ee <qbufferWrite+0x60>
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	50 e0       	ldi	r21, 0x00	; 0
    {
      next_index = 0;;
    }

    if (next_index != p_node->ptr_out)
 2ee:	8c 81       	ldd	r24, Y+4	; 0x04
 2f0:	9d 81       	ldd	r25, Y+5	; 0x05
 2f2:	ae 81       	ldd	r26, Y+6	; 0x06
 2f4:	bf 81       	ldd	r27, Y+7	; 0x07
 2f6:	28 17       	cp	r18, r24
 2f8:	39 07       	cpc	r19, r25
 2fa:	4a 07       	cpc	r20, r26
 2fc:	5b 07       	cpc	r21, r27
 2fe:	c9 f0       	breq	.+50     	; 0x332 <qbufferWrite+0xa4>
    {
      p_node->p_buf[index] = p_data[i];
 300:	ec 85       	ldd	r30, Y+12	; 0x0c
 302:	fd 85       	ldd	r31, Y+13	; 0x0d
 304:	ea 0d       	add	r30, r10
 306:	fb 1d       	adc	r31, r11
 308:	db 01       	movw	r26, r22
 30a:	ae 0d       	add	r26, r14
 30c:	bf 1d       	adc	r27, r15
 30e:	8c 91       	ld	r24, X
 310:	80 83       	st	Z, r24
      p_node->ptr_in       = next_index;
 312:	28 83       	st	Y, r18
 314:	39 83       	std	Y+1, r19	; 0x01
 316:	4a 83       	std	Y+2, r20	; 0x02
 318:	5b 83       	std	Y+3, r21	; 0x03
  uint32_t i;

  if (p_node->p_buf == NULL) return false;


  for (i=0; i<length; i++)
 31a:	08 94       	sec
 31c:	e1 1c       	adc	r14, r1
 31e:	f1 1c       	adc	r15, r1
 320:	01 1d       	adc	r16, r1
 322:	11 1d       	adc	r17, r1
 324:	e6 14       	cp	r14, r6
 326:	f7 04       	cpc	r15, r7
 328:	08 05       	cpc	r16, r8
 32a:	19 05       	cpc	r17, r9
 32c:	48 f2       	brcs	.-110    	; 0x2c0 <qbufferWrite+0x32>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	01 c0       	rjmp	.+2      	; 0x334 <qbufferWrite+0xa6>
 332:	80 e0       	ldi	r24, 0x00	; 0
      break;
    }
  }

  return ret;
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	df 90       	pop	r13
 342:	cf 90       	pop	r12
 344:	bf 90       	pop	r11
 346:	af 90       	pop	r10
 348:	9f 90       	pop	r9
 34a:	8f 90       	pop	r8
 34c:	7f 90       	pop	r7
 34e:	6f 90       	pop	r6
 350:	08 95       	ret

00000352 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 352:	6f 92       	push	r6
 354:	7f 92       	push	r7
 356:	8f 92       	push	r8
 358:	9f 92       	push	r9
 35a:	af 92       	push	r10
 35c:	bf 92       	push	r11
 35e:	cf 92       	push	r12
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	ec 01       	movw	r28, r24
 370:	39 01       	movw	r6, r18
 372:	4a 01       	movw	r8, r20
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if (p_node->p_buf == NULL) return false;
 374:	8c 85       	ldd	r24, Y+12	; 0x0c
 376:	9d 85       	ldd	r25, Y+13	; 0x0d
 378:	89 2b       	or	r24, r25
 37a:	e9 f1       	breq	.+122    	; 0x3f6 <qbufferRead+0xa4>
 37c:	aa 24       	eor	r10, r10
 37e:	bb 24       	eor	r11, r11
 380:	65 01       	movw	r12, r10
 382:	32 c0       	rjmp	.+100    	; 0x3e8 <qbufferRead+0x96>


  for (i=0; i<length; i++)
  {
    index      = p_node->ptr_out;
 384:	2c 81       	ldd	r18, Y+4	; 0x04
 386:	3d 81       	ldd	r19, Y+5	; 0x05
 388:	4e 81       	ldd	r20, Y+6	; 0x06
 38a:	5f 81       	ldd	r21, Y+7	; 0x07
    next_index = p_node->ptr_out + 1;
 38c:	79 01       	movw	r14, r18
 38e:	8a 01       	movw	r16, r20
 390:	08 94       	sec
 392:	e1 1c       	adc	r14, r1
 394:	f1 1c       	adc	r15, r1
 396:	01 1d       	adc	r16, r1
 398:	11 1d       	adc	r17, r1

    if (next_index == p_node->length)
 39a:	88 85       	ldd	r24, Y+8	; 0x08
 39c:	99 85       	ldd	r25, Y+9	; 0x09
 39e:	aa 85       	ldd	r26, Y+10	; 0x0a
 3a0:	bb 85       	ldd	r27, Y+11	; 0x0b
 3a2:	e8 16       	cp	r14, r24
 3a4:	f9 06       	cpc	r15, r25
 3a6:	0a 07       	cpc	r16, r26
 3a8:	1b 07       	cpc	r17, r27
 3aa:	19 f4       	brne	.+6      	; 0x3b2 <qbufferRead+0x60>
 3ac:	ee 24       	eor	r14, r14
 3ae:	ff 24       	eor	r15, r15
 3b0:	87 01       	movw	r16, r14
    {
      next_index = 0;
    }

    if (index != p_node->ptr_in)
 3b2:	88 81       	ld	r24, Y
 3b4:	99 81       	ldd	r25, Y+1	; 0x01
 3b6:	aa 81       	ldd	r26, Y+2	; 0x02
 3b8:	bb 81       	ldd	r27, Y+3	; 0x03
 3ba:	28 17       	cp	r18, r24
 3bc:	39 07       	cpc	r19, r25
 3be:	4a 07       	cpc	r20, r26
 3c0:	5b 07       	cpc	r21, r27
 3c2:	c9 f0       	breq	.+50     	; 0x3f6 <qbufferRead+0xa4>
    {
      p_data[i]       = p_node->p_buf[index];
 3c4:	fb 01       	movw	r30, r22
 3c6:	ea 0d       	add	r30, r10
 3c8:	fb 1d       	adc	r31, r11
 3ca:	ac 85       	ldd	r26, Y+12	; 0x0c
 3cc:	bd 85       	ldd	r27, Y+13	; 0x0d
 3ce:	a2 0f       	add	r26, r18
 3d0:	b3 1f       	adc	r27, r19
 3d2:	8c 91       	ld	r24, X
 3d4:	80 83       	st	Z, r24
      p_node->ptr_out = next_index;
 3d6:	ec 82       	std	Y+4, r14	; 0x04
 3d8:	fd 82       	std	Y+5, r15	; 0x05
 3da:	0e 83       	std	Y+6, r16	; 0x06
 3dc:	1f 83       	std	Y+7, r17	; 0x07
  uint32_t i;

  if (p_node->p_buf == NULL) return false;


  for (i=0; i<length; i++)
 3de:	08 94       	sec
 3e0:	a1 1c       	adc	r10, r1
 3e2:	b1 1c       	adc	r11, r1
 3e4:	c1 1c       	adc	r12, r1
 3e6:	d1 1c       	adc	r13, r1
 3e8:	a6 14       	cp	r10, r6
 3ea:	b7 04       	cpc	r11, r7
 3ec:	c8 04       	cpc	r12, r8
 3ee:	d9 04       	cpc	r13, r9
 3f0:	48 f2       	brcs	.-110    	; 0x384 <qbufferRead+0x32>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <qbufferRead+0xa6>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
      break;
    }
  }

  return ret;
}
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	df 90       	pop	r13
 406:	cf 90       	pop	r12
 408:	bf 90       	pop	r11
 40a:	af 90       	pop	r10
 40c:	9f 90       	pop	r9
 40e:	8f 90       	pop	r8
 410:	7f 90       	pop	r7
 412:	6f 90       	pop	r6
 414:	08 95       	ret

00000416 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 416:	ef 92       	push	r14
 418:	ff 92       	push	r15
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	fc 01       	movw	r30, r24
  uint32_t length;


  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 420:	20 85       	ldd	r18, Z+8	; 0x08
 422:	31 85       	ldd	r19, Z+9	; 0x09
 424:	42 85       	ldd	r20, Z+10	; 0x0a
 426:	53 85       	ldd	r21, Z+11	; 0x0b
 428:	60 81       	ld	r22, Z
 42a:	71 81       	ldd	r23, Z+1	; 0x01
 42c:	82 81       	ldd	r24, Z+2	; 0x02
 42e:	93 81       	ldd	r25, Z+3	; 0x03
 430:	62 0f       	add	r22, r18
 432:	73 1f       	adc	r23, r19
 434:	84 1f       	adc	r24, r20
 436:	95 1f       	adc	r25, r21
 438:	e4 80       	ldd	r14, Z+4	; 0x04
 43a:	f5 80       	ldd	r15, Z+5	; 0x05
 43c:	06 81       	ldd	r16, Z+6	; 0x06
 43e:	17 81       	ldd	r17, Z+7	; 0x07
 440:	6e 19       	sub	r22, r14
 442:	7f 09       	sbc	r23, r15
 444:	80 0b       	sbc	r24, r16
 446:	91 0b       	sbc	r25, r17
 448:	0e 94 35 02 	call	0x46a	; 0x46a <__udivmodsi4>

  return length;
}
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	08 95       	ret

00000456 <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node)
{
 456:	fc 01       	movw	r30, r24
  p_node->ptr_in  = 0;
 458:	10 82       	st	Z, r1
 45a:	11 82       	std	Z+1, r1	; 0x01
 45c:	12 82       	std	Z+2, r1	; 0x02
 45e:	13 82       	std	Z+3, r1	; 0x03
  p_node->ptr_out = 0;
 460:	14 82       	std	Z+4, r1	; 0x04
 462:	15 82       	std	Z+5, r1	; 0x05
 464:	16 82       	std	Z+6, r1	; 0x06
 466:	17 82       	std	Z+7, r1	; 0x07
}
 468:	08 95       	ret

0000046a <__udivmodsi4>:
 46a:	a1 e2       	ldi	r26, 0x21	; 33
 46c:	1a 2e       	mov	r1, r26
 46e:	aa 1b       	sub	r26, r26
 470:	bb 1b       	sub	r27, r27
 472:	fd 01       	movw	r30, r26
 474:	0d c0       	rjmp	.+26     	; 0x490 <__udivmodsi4_ep>

00000476 <__udivmodsi4_loop>:
 476:	aa 1f       	adc	r26, r26
 478:	bb 1f       	adc	r27, r27
 47a:	ee 1f       	adc	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	a2 17       	cp	r26, r18
 480:	b3 07       	cpc	r27, r19
 482:	e4 07       	cpc	r30, r20
 484:	f5 07       	cpc	r31, r21
 486:	20 f0       	brcs	.+8      	; 0x490 <__udivmodsi4_ep>
 488:	a2 1b       	sub	r26, r18
 48a:	b3 0b       	sbc	r27, r19
 48c:	e4 0b       	sbc	r30, r20
 48e:	f5 0b       	sbc	r31, r21

00000490 <__udivmodsi4_ep>:
 490:	66 1f       	adc	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	88 1f       	adc	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	1a 94       	dec	r1
 49a:	69 f7       	brne	.-38     	; 0x476 <__udivmodsi4_loop>
 49c:	60 95       	com	r22
 49e:	70 95       	com	r23
 4a0:	80 95       	com	r24
 4a2:	90 95       	com	r25
 4a4:	9b 01       	movw	r18, r22
 4a6:	ac 01       	movw	r20, r24
 4a8:	bd 01       	movw	r22, r26
 4aa:	cf 01       	movw	r24, r30
 4ac:	08 95       	ret

000004ae <_exit>:
 4ae:	f8 94       	cli

000004b0 <__stop_program>:
 4b0:	ff cf       	rjmp	.-2      	; 0x4b0 <__stop_program>
