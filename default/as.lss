
as.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000226  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080011e  0080011e  000002d8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000aa  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000347  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000185  00000000  00000000  000006e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000316  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011e  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000086  00000000  00000000  00000d22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_30>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e2       	ldi	r30, 0x26	; 38
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 32       	cpi	r26, 0x20	; 32
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  c6:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <USART_Init>:
    }while(1);
}

void USART_Init(void)
{
    UBRR0H = 0;//baud = 9600!!
  ce:	10 92 90 00 	sts	0x0090, r1
    UBRR0L = 207;//baud = 9600!!
  d2:	3f ec       	ldi	r19, 0xCF	; 207
  d4:	39 b9       	out	0x09, r19	; 9
    UCSR0A = 0x02;                  //asynchronous normal mode
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	2b b9       	out	0x0b, r18	; 11
    UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //interrupt, Rx/Tx enable
  da:	98 e9       	ldi	r25, 0x98	; 152
  dc:	9a b9       	out	0x0a, r25	; 10
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);//no parity, 1 stop, 8 data
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 95 00 	sts	0x0095, r24
	
	UBRR1H = 0;//baud = 9600!!
  e4:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = 207;//baud = 9600!!
  e8:	30 93 99 00 	sts	0x0099, r19
    UCSR1A = 0x02;                  //asynchronous normal mode
  ec:	20 93 9b 00 	sts	0x009B, r18
    UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1); //interrupt, Rx/Tx enable
  f0:	90 93 9a 00 	sts	0x009A, r25
    UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
  f4:	80 93 9d 00 	sts	0x009D, r24

}
  f8:	08 95       	ret

000000fa <TX0_Byte>:

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
  fa:	5d 9b       	sbis	0x0b, 5	; 11
  fc:	fe cf       	rjmp	.-4      	; 0xfa <TX0_Byte>
    UDR0 = data;                    //put data into buffer, send the data
  fe:	8c b9       	out	0x0c, r24	; 12
}
 100:	08 95       	ret

00000102 <TX1_Byte>:

void TX1_Byte(unsigned char data)
{
 102:	98 2f       	mov	r25, r24
    while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 104:	80 91 9b 00 	lds	r24, 0x009B
 108:	85 ff       	sbrs	r24, 5
 10a:	fc cf       	rjmp	.-8      	; 0x104 <TX1_Byte+0x2>
    UDR1 = data;                    //put data into buffer, send the data
 10c:	90 93 9c 00 	sts	0x009C, r25
}
 110:	08 95       	ret

00000112 <print>:

void print(unsigned char *message)
{
 112:	fc 01       	movw	r30, r24
 114:	0a c0       	rjmp	.+20     	; 0x12a <print+0x18>

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 116:	5d 9b       	sbis	0x0b, 5	; 11
 118:	fe cf       	rjmp	.-4      	; 0x116 <print+0x4>
    UDR0 = data;                    //put data into buffer, send the data
 11a:	9c b9       	out	0x0c, r25	; 12
}

void TX1_Byte(unsigned char data)
{
    while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 11c:	80 91 9b 00 	lds	r24, 0x009B
 120:	85 ff       	sbrs	r24, 5
 122:	fc cf       	rjmp	.-8      	; 0x11c <print+0xa>
    UDR1 = data;                    //put data into buffer, send the data
 124:	90 93 9c 00 	sts	0x009C, r25
void print(unsigned char *message)
{
    while(*message != '\0'){
        TX0_Byte(*message);
        TX1_Byte(*message);
        message++;
 128:	31 96       	adiw	r30, 0x01	; 1
    UDR1 = data;                    //put data into buffer, send the data
}

void print(unsigned char *message)
{
    while(*message != '\0'){
 12a:	90 81       	ld	r25, Z
 12c:	99 23       	and	r25, r25
 12e:	99 f7       	brne	.-26     	; 0x116 <print+0x4>
 130:	07 c0       	rjmp	.+14     	; 0x140 <print+0x2e>
    UDR0 = data;                    //put data into buffer, send the data
}

void TX1_Byte(unsigned char data)
{
    while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 132:	80 91 9b 00 	lds	r24, 0x009B
 136:	85 ff       	sbrs	r24, 5
 138:	fc cf       	rjmp	.-8      	; 0x132 <print+0x20>
    UDR1 = data;                    //put data into buffer, send the data
 13a:	90 93 9c 00 	sts	0x009C, r25

    }
	
    while(*message != '\0'){
        TX1_Byte(*message);
        message++;
 13e:	31 96       	adiw	r30, 0x01	; 1
        TX1_Byte(*message);
        message++;

    }
	
    while(*message != '\0'){
 140:	90 81       	ld	r25, Z
 142:	99 23       	and	r25, r25
 144:	b1 f7       	brne	.-20     	; 0x132 <print+0x20>
        TX1_Byte(*message);
        message++;
    }
}
 146:	08 95       	ret

00000148 <main>:
//void PRINT_M(unsigned char *message);
void print(unsigned char *message);


int main(void)
{
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
	
    USART_Init();  // baud rate : 9600
 150:	0e 94 67 00 	call	0xce	; 0xce <USART_Init>
    sei();
 154:	78 94       	sei
    print(prompt);
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 89 00 	call	0x112	; 0x112 <print>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 15e:	c0 e9       	ldi	r28, 0x90	; 144
 160:	d1 e0       	ldi	r29, 0x01	; 1
}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
    UDR0 = data;                    //put data into buffer, send the data
 162:	0d e0       	ldi	r16, 0x0D	; 13
	
    USART_Init();  // baud rate : 9600
    sei();
    print(prompt);
    do{
		print(str1);
 164:	1a e0       	ldi	r17, 0x0A	; 10
 166:	8c e0       	ldi	r24, 0x0C	; 12
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 89 00 	call	0x112	; 0x112 <print>
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	97 e2       	ldi	r25, 0x27	; 39
 172:	fe 01       	movw	r30, r28
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 178:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17a:	d9 f7       	brne	.-10     	; 0x172 <main+0x2a>
		_delay_ms(1000);
		PORTA = ~PORTA;
 17c:	8b b3       	in	r24, 0x1b	; 27
 17e:	80 95       	com	r24
 180:	8b bb       	out	0x1b, r24	; 27
		
        if(receive_completion){
 182:	80 91 1e 01 	lds	r24, 0x011E
 186:	88 23       	and	r24, r24
 188:	71 f3       	breq	.-36     	; 0x166 <main+0x1e>
            receive_completion = 0;
 18a:	10 92 1e 01 	sts	0x011E, r1
            switch(receive_data){
 18e:	80 91 1f 01 	lds	r24, 0x011F
 192:	8a 30       	cpi	r24, 0x0A	; 10
 194:	41 f0       	breq	.+16     	; 0x1a6 <main+0x5e>
 196:	8d 30       	cpi	r24, 0x0D	; 13
 198:	61 f4       	brne	.+24     	; 0x1b2 <main+0x6a>

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 19a:	5d 9b       	sbis	0x0b, 5	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <main+0x52>
    UDR0 = data;                    //put data into buffer, send the data
 19e:	0c b9       	out	0x0c, r16	; 12

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 1a0:	5d 9b       	sbis	0x0b, 5	; 11
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <main+0x58>
 1a4:	10 c0       	rjmp	.+32     	; 0x1c6 <main+0x7e>
 1a6:	5d 9b       	sbis	0x0b, 5	; 11
 1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <main+0x5e>
    UDR0 = data;                    //put data into buffer, send the data
 1aa:	0c b9       	out	0x0c, r16	; 12

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 1ac:	5d 9b       	sbis	0x0b, 5	; 11
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <main+0x64>
 1b0:	0a c0       	rjmp	.+20     	; 0x1c6 <main+0x7e>
                            print(prompt);
                            break;
                case '\n' : TX0_Byte('\r'); TX0_Byte('\n');
                            print(prompt);
                            break;
                default   : TX0_Byte(receive_data);
 1b2:	80 91 1f 01 	lds	r24, 0x011F

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 1b6:	5d 9b       	sbis	0x0b, 5	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <main+0x6e>
    UDR0 = data;                    //put data into buffer, send the data
 1ba:	8c b9       	out	0x0c, r24	; 12

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 1bc:	5d 9b       	sbis	0x0b, 5	; 11
 1be:	fe cf       	rjmp	.-4      	; 0x1bc <main+0x74>
    UDR0 = data;                    //put data into buffer, send the data
 1c0:	0c b9       	out	0x0c, r16	; 12

}

void TX0_Byte(unsigned char data)
{
    while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 1c2:	5d 9b       	sbis	0x0b, 5	; 11
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <main+0x7a>
    UDR0 = data;                    //put data into buffer, send the data
 1c6:	1c b9       	out	0x0c, r17	; 12
                case '\n' : TX0_Byte('\r'); TX0_Byte('\n');
                            print(prompt);
                            break;
                default   : TX0_Byte(receive_data);
                            TX0_Byte('\r'); TX0_Byte('\n');
                            print(prompt);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	91 e0       	ldi	r25, 0x01	; 1
 1cc:	0e 94 89 00 	call	0x112	; 0x112 <print>
 1d0:	ca cf       	rjmp	.-108    	; 0x166 <main+0x1e>

000001d2 <__vector_18>:
}



SIGNAL(SIG_UART0_RECV)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	8f 93       	push	r24
    receive_data = UDR0;
 1de:	8c b1       	in	r24, 0x0c	; 12
 1e0:	80 93 1f 01 	sts	0x011F, r24
    receive_completion = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 1e 01 	sts	0x011E, r24
}
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_30>:


SIGNAL(SIG_UART1_RECV)
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
    	receive_data = UDR1;
 202:	80 91 9c 00 	lds	r24, 0x009C
 206:	80 93 1f 01 	sts	0x011F, r24
		PORTA = ~PORTA;
 20a:	8b b3       	in	r24, 0x1b	; 27
 20c:	80 95       	com	r24
 20e:	8b bb       	out	0x1b, r24	; 27
		receive_completion = 1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 1e 01 	sts	0x011E, r24
}
 216:	8f 91       	pop	r24
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
