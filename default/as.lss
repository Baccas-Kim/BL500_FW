
as.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  0000059a  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d7  0080011e  0080011e  0000064c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001e8  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cf  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b6  00000000  00000000  00001043  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005fb  00000000  00000000  000012f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000261  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023c  00000000  00000000  00001cc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_1>
   8:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_2>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__vector_30>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	18 e0       	ldi	r17, 0x08	; 8
  b4:	ae e1       	ldi	r26, 0x1E	; 30
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 3f       	cpi	r26, 0xF5	; 245
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 10 01 	call	0x220	; 0x220 <main>
  c6:	0c 94 cb 02 	jmp	0x596	; 0x596 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <Hw_Init>:

}

void Hw_Init(void)
{
  sei();        //enable all interrupts 
  ce:	78 94       	sei
}
  d0:	08 95       	ret

000000d2 <UART0_Init>:

void UART0_Init(void)
{
  UBRR0H = 0;//baud = 9600!!
  d2:	10 92 90 00 	sts	0x0090, r1
  UBRR0L = 207;//baud = 9600!
  d6:	8f ec       	ldi	r24, 0xCF	; 207
  d8:	89 b9       	out	0x09, r24	; 9
  UCSR0A = 0x02;                  //asynchronous normal mode
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	8b b9       	out	0x0b, r24	; 11
  UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //interrupt, Rx/Tx enable
  de:	88 e9       	ldi	r24, 0x98	; 152
  e0:	8a b9       	out	0x0a, r24	; 10
  UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);//no parity, 1 stop, 8 data
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 95 00 	sts	0x0095, r24
}
  e8:	08 95       	ret

000000ea <UART1_Init>:

void UART1_Init(void)
{
  UBRR1H = 0;//baud = 9600!!
  ea:	10 92 98 00 	sts	0x0098, r1
  UBRR1L = 207;//baud = 9600!!
  ee:	8f ec       	ldi	r24, 0xCF	; 207
  f0:	80 93 99 00 	sts	0x0099, r24
  UCSR1A = 0x02;                  //asynchronous normal mode
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 9b 00 	sts	0x009B, r24
  UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1); //interrupt, Rx/Tx enable
  fa:	88 e9       	ldi	r24, 0x98	; 152
  fc:	80 93 9a 00 	sts	0x009A, r24
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	80 93 9d 00 	sts	0x009D, r24
}
 106:	08 95       	ret

00000108 <UART0_Read_Byte>:

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 108:	5d 9b       	sbis	0x0b, 5	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <UART0_Read_Byte>
  UDR0 = data;                    //put data into buffer, send the data
 10c:	8c b9       	out	0x0c, r24	; 12
}
 10e:	08 95       	ret

00000110 <UART1_Read_Byte>:

void UART1_Read_Byte(unsigned char data)
{
 110:	98 2f       	mov	r25, r24
  while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 112:	80 91 9b 00 	lds	r24, 0x009B
 116:	85 ff       	sbrs	r24, 5
 118:	fc cf       	rjmp	.-8      	; 0x112 <UART1_Read_Byte+0x2>
  UDR1 = data;                    //put data into buffer, send the data
 11a:	90 93 9c 00 	sts	0x009C, r25
}
 11e:	08 95       	ret

00000120 <print>:

void print(unsigned char *message)
{
 120:	fc 01       	movw	r30, r24
 122:	0a c0       	rjmp	.+20     	; 0x138 <print+0x18>
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 124:	5d 9b       	sbis	0x0b, 5	; 11
 126:	fe cf       	rjmp	.-4      	; 0x124 <print+0x4>
  UDR0 = data;                    //put data into buffer, send the data
 128:	9c b9       	out	0x0c, r25	; 12
}

void UART1_Read_Byte(unsigned char data)
{
  while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 12a:	80 91 9b 00 	lds	r24, 0x009B
 12e:	85 ff       	sbrs	r24, 5
 130:	fc cf       	rjmp	.-8      	; 0x12a <print+0xa>
  UDR1 = data;                    //put data into buffer, send the data
 132:	90 93 9c 00 	sts	0x009C, r25
void print(unsigned char *message)
{
  while(*message != '\0'){
    UART0_Read_Byte(*message);
    UART1_Read_Byte(*message);
    message++;
 136:	31 96       	adiw	r30, 0x01	; 1
  UDR1 = data;                    //put data into buffer, send the data
}

void print(unsigned char *message)
{
  while(*message != '\0'){
 138:	90 81       	ld	r25, Z
 13a:	99 23       	and	r25, r25
 13c:	99 f7       	brne	.-26     	; 0x124 <print+0x4>
 13e:	07 c0       	rjmp	.+14     	; 0x14e <print+0x2e>
  UDR0 = data;                    //put data into buffer, send the data
}

void UART1_Read_Byte(unsigned char data)
{
  while(!(UCSR1A & (1<<UDRE1)));  //wait for empty transmit buffer
 140:	80 91 9b 00 	lds	r24, 0x009B
 144:	85 ff       	sbrs	r24, 5
 146:	fc cf       	rjmp	.-8      	; 0x140 <print+0x20>
  UDR1 = data;                    //put data into buffer, send the data
 148:	90 93 9c 00 	sts	0x009C, r25
    message++;
  }
	
  while(*message != '\0'){
    UART1_Read_Byte(*message);
    message++;
 14c:	31 96       	adiw	r30, 0x01	; 1
    UART0_Read_Byte(*message);
    UART1_Read_Byte(*message);
    message++;
  }
	
  while(*message != '\0'){
 14e:	90 81       	ld	r25, Z
 150:	99 23       	and	r25, r25
 152:	b1 f7       	brne	.-20     	; 0x140 <print+0x20>
    UART1_Read_Byte(*message);
    message++;
  }
}
 154:	08 95       	ret

00000156 <UI_Handler>:

void UI_Handler(unsigned char *qdata)
{
  if(receive_completion){
 156:	80 91 24 01 	lds	r24, 0x0124
 15a:	88 23       	and	r24, r24
 15c:	69 f1       	breq	.+90     	; 0x1b8 <UI_Handler+0x62>
    receive_completion = 0;
 15e:	10 92 24 01 	sts	0x0124, r1
    switch(receive_data){
 162:	80 91 23 01 	lds	r24, 0x0123
 166:	8a 30       	cpi	r24, 0x0A	; 10
 168:	49 f0       	breq	.+18     	; 0x17c <UI_Handler+0x26>
 16a:	8d 30       	cpi	r24, 0x0D	; 13
 16c:	a1 f4       	brne	.+40     	; 0x196 <UI_Handler+0x40>
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 16e:	5d 9b       	sbis	0x0b, 5	; 11
 170:	fe cf       	rjmp	.-4      	; 0x16e <UI_Handler+0x18>
  UDR0 = data;                    //put data into buffer, send the data
 172:	8d e0       	ldi	r24, 0x0D	; 13
 174:	8c b9       	out	0x0c, r24	; 12
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 176:	5d 9b       	sbis	0x0b, 5	; 11
 178:	fe cf       	rjmp	.-4      	; 0x176 <UI_Handler+0x20>
 17a:	06 c0       	rjmp	.+12     	; 0x188 <UI_Handler+0x32>
  UDR0 = data;                    //put data into buffer, send the data
 17c:	5d 9b       	sbis	0x0b, 5	; 11
 17e:	fe cf       	rjmp	.-4      	; 0x17c <UI_Handler+0x26>
 180:	8d e0       	ldi	r24, 0x0D	; 13
 182:	8c b9       	out	0x0c, r24	; 12
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 184:	5d 9b       	sbis	0x0b, 5	; 11
 186:	fe cf       	rjmp	.-4      	; 0x184 <UI_Handler+0x2e>
  UDR0 = data;                    //put data into buffer, send the data
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	8c b9       	out	0x0c, r24	; 12
    switch(receive_data){
        case '\r' : UART0_Read_Byte('\r'); UART0_Read_Byte('\n');
                    print(prompt);
                    break;
        case '\n' : UART0_Read_Byte('\r'); UART0_Read_Byte('\n');
                    print(prompt);
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	0e 94 90 00 	call	0x120	; 0x120 <print>
 194:	08 95       	ret
                    break;
        default   : UART0_Read_Byte(receive_data);
 196:	80 91 23 01 	lds	r24, 0x0123
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 19a:	5d 9b       	sbis	0x0b, 5	; 11
 19c:	fe cf       	rjmp	.-4      	; 0x19a <UI_Handler+0x44>
  UDR0 = data;                    //put data into buffer, send the data
 19e:	8c b9       	out	0x0c, r24	; 12
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 1a0:	5d 9b       	sbis	0x0b, 5	; 11
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <UI_Handler+0x4a>
  UDR0 = data;                    //put data into buffer, send the data
 1a4:	8d e0       	ldi	r24, 0x0D	; 13
 1a6:	8c b9       	out	0x0c, r24	; 12
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
}

void UART0_Read_Byte(unsigned char data)
{
  while(!(UCSR0A & (1<<UDRE0)));  //wait for empty transmit buffer
 1a8:	5d 9b       	sbis	0x0b, 5	; 11
 1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <UI_Handler+0x52>
  UDR0 = data;                    //put data into buffer, send the data
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	8c b9       	out	0x0c, r24	; 12
        case '\n' : UART0_Read_Byte('\r'); UART0_Read_Byte('\n');
                    print(prompt);
                    break;
        default   : UART0_Read_Byte(receive_data);
                    UART0_Read_Byte('\r'); UART0_Read_Byte('\n');
                    print(prompt);
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 90 00 	call	0x120	; 0x120 <print>
 1b8:	08 95       	ret

000001ba <__vector_18>:
  }
  return;
}

SIGNAL(SIG_UART0_RECV)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	8f 93       	push	r24
  receive_data = UDR0;
 1c6:	8c b1       	in	r24, 0x0c	; 12
 1c8:	80 93 23 01 	sts	0x0123, r24
  receive_completion = 1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 24 01 	sts	0x0124, r24
}
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_30>:


SIGNAL(SIG_UART1_RECV)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	8f 93       	push	r24
  unsigned char ret = 0;
  //ret = rbuf[rx_out];


  receive_data = UDR1;
 1ea:	80 91 9c 00 	lds	r24, 0x009C
 1ee:	80 93 23 01 	sts	0x0123, r24
  PORTA = ~PORTA;
 1f2:	8b b3       	in	r24, 0x1b	; 27
 1f4:	80 95       	com	r24
 1f6:	8b bb       	out	0x1b, r24	; 27
  receive_completion = 1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 24 01 	sts	0x0124, r24
}
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <Timer_Init>:



void Timer_Init(void)//1초를 만들기 위해서 타이머카운트 인터럽트를 사용합니다. 
{ 
  TCCR0 = 0x07; 
 20a:	97 e0       	ldi	r25, 0x07	; 7
 20c:	93 bf       	out	0x33, r25	; 51
  TCNT0 = 0x70; //{(0xff-0x70)+1} * 126 * (1/16Mhz) = 10ms 
 20e:	80 e7       	ldi	r24, 0x70	; 112
 210:	82 bf       	out	0x32, r24	; 50
  TCCR2 = 0x07; 
 212:	95 bd       	out	0x25, r25	; 37
  TCNT2 = 0x70; //{(0xff-0x70)+1} * 126 * (1/16Mhz) = 10ms 
 214:	84 bd       	out	0x24, r24	; 36
  TIMSK = 0x41; 
 216:	81 e4       	ldi	r24, 0x41	; 65
 218:	87 bf       	out	0x37, r24	; 55
  TIFR = 0x40; 
 21a:	80 e4       	ldi	r24, 0x40	; 64
 21c:	86 bf       	out	0x36, r24	; 54
} 
 21e:	08 95       	ret

00000220 <main>:
  UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);//no parity, 1 stop, 8 data
}

void UART1_Init(void)
{
  UBRR1H = 0;//baud = 9600!!
 220:	10 92 98 00 	sts	0x0098, r1
  UBRR1L = 207;//baud = 9600!!
 224:	3f ec       	ldi	r19, 0xCF	; 207
 226:	30 93 99 00 	sts	0x0099, r19
  UCSR1A = 0x02;                  //asynchronous normal mode
 22a:	22 e0       	ldi	r18, 0x02	; 2
 22c:	20 93 9b 00 	sts	0x009B, r18
  UCSR1B = (1<<RXCIE1)|(1<<RXEN1)|(1<<TXEN1); //interrupt, Rx/Tx enable
 230:	98 e9       	ldi	r25, 0x98	; 152
 232:	90 93 9a 00 	sts	0x009A, r25
  UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);//no parity, 1 stop, 8 data
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	80 93 9d 00 	sts	0x009D, r24
  sei();        //enable all interrupts 
}

void UART0_Init(void)
{
  UBRR0H = 0;//baud = 9600!!
 23c:	10 92 90 00 	sts	0x0090, r1
  UBRR0L = 207;//baud = 9600!
 240:	39 b9       	out	0x09, r19	; 9
  UCSR0A = 0x02;                  //asynchronous normal mode
 242:	2b b9       	out	0x0b, r18	; 11
  UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //interrupt, Rx/Tx enable
 244:	9a b9       	out	0x0a, r25	; 10
  UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);//no parity, 1 stop, 8 data
 246:	80 93 95 00 	sts	0x0095, r24

}

void Hw_Init(void)
{
  sei();        //enable all interrupts 
 24a:	78 94       	sei
{
  unsigned char qdata[QBUFFER];
  UART1_Init();  // baud rate : 9600
  UART0_Init();  // baud rate : 9600
  Hw_Init();
  Timer_Init();
 24c:	0e 94 05 01 	call	0x20a	; 0x20a <Timer_Init>
  print(prompt);
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 90 00 	call	0x120	; 0x120 <print>
 258:	80 e1       	ldi	r24, 0x10	; 16
 25a:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 25c:	20 e9       	ldi	r18, 0x90	; 144
 25e:	31 e0       	ldi	r19, 0x01	; 1
 260:	f9 01       	movw	r30, r18
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <main+0x42>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 266:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 268:	d9 f7       	brne	.-10     	; 0x260 <main+0x40>
 26a:	80 e1       	ldi	r24, 0x10	; 16
 26c:	97 e2       	ldi	r25, 0x27	; 39
 26e:	f8 cf       	rjmp	.-16     	; 0x260 <main+0x40>

00000270 <__vector_16>:

//======================================
//Timer0 
//======================================
SIGNAL(SIG_OVERFLOW0)//timer0 Overflow interrupt 
{ 
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	0b b6       	in	r0, 0x3b	; 59
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
  Tii_count--; ms++; 
 296:	80 91 1e 01 	lds	r24, 0x011E
 29a:	81 50       	subi	r24, 0x01	; 1
 29c:	80 93 1e 01 	sts	0x011E, r24
 2a0:	80 91 20 01 	lds	r24, 0x0120
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 93 20 01 	sts	0x0120, r24
  if(!Tii_count){//10ms * 100 = 1000ms delay = 1s 
 2aa:	80 91 1e 01 	lds	r24, 0x011E
 2ae:	88 23       	and	r24, r24
 2b0:	89 f4       	brne	.+34     	; 0x2d4 <__vector_16+0x64>
    Tii_count = 100; ss++; ms=0; 
 2b2:	84 e6       	ldi	r24, 0x64	; 100
 2b4:	80 93 1e 01 	sts	0x011E, r24
 2b8:	80 91 1f 01 	lds	r24, 0x011F
 2bc:	8f 5f       	subi	r24, 0xFF	; 255
 2be:	80 93 1f 01 	sts	0x011F, r24
 2c2:	10 92 20 01 	sts	0x0120, r1
	PORTB = ~PORTB;
 2c6:	88 b3       	in	r24, 0x18	; 24
 2c8:	80 95       	com	r24
 2ca:	88 bb       	out	0x18, r24	; 24

    print(str1);
 2cc:	8c e0       	ldi	r24, 0x0C	; 12
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 90 00 	call	0x120	; 0x120 <print>
  } 
  TCNT0 = 0x70; 
 2d4:	80 e7       	ldi	r24, 0x70	; 112
 2d6:	82 bf       	out	0x32, r24	; 50
} 
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0b be       	out	0x3b, r0	; 59
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__vector_10>:

//======================================
//Timer1 
//======================================
SIGNAL(SIG_OVERFLOW2)//timer1 Overflow interrupt 
{ 
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	8f 93       	push	r24
  
  TCNT2 = 0x70; 
 30a:	80 e7       	ldi	r24, 0x70	; 112
 30c:	84 bd       	out	0x24, r24	; 36
} 
 30e:	8f 91       	pop	r24
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <__vector_1>:
  
//====================================== 
//Exint0
//====================================== 
SIGNAL(SIG_INTERRUPT0)//Exint0 Overflow interrupt 
{
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
  //@@@
} 
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_2>:

//======================================
//Exint1
//======================================  
SIGNAL(SIG_INTERRUPT1) 
{ 
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
  //@@@
}
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <qbufferInit>:
#include "qbuffer.h"

void qbufferInit(void)
{

}
 342:	08 95       	ret

00000344 <qbufferCreate>:

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 344:	fc 01       	movw	r30, r24
  bool ret = true;


  p_node->ptr_in  = 0;
 346:	10 82       	st	Z, r1
 348:	11 82       	std	Z+1, r1	; 0x01
 34a:	12 82       	std	Z+2, r1	; 0x02
 34c:	13 82       	std	Z+3, r1	; 0x03
  p_node->ptr_out = 0;
 34e:	14 82       	std	Z+4, r1	; 0x04
 350:	15 82       	std	Z+5, r1	; 0x05
 352:	16 82       	std	Z+6, r1	; 0x06
 354:	17 82       	std	Z+7, r1	; 0x07
  p_node->length  = length;
 356:	20 87       	std	Z+8, r18	; 0x08
 358:	31 87       	std	Z+9, r19	; 0x09
 35a:	42 87       	std	Z+10, r20	; 0x0a
 35c:	53 87       	std	Z+11, r21	; 0x0b
  p_node->p_buf   = p_buf;
 35e:	75 87       	std	Z+13, r23	; 0x0d
 360:	64 87       	std	Z+12, r22	; 0x0c

  if (p_node->p_buf == NULL)
 362:	67 2b       	or	r22, r23
 364:	11 f0       	breq	.+4      	; 0x36a <qbufferCreate+0x26>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	08 95       	ret
  {
    p_node->length = 0;
 36a:	10 86       	std	Z+8, r1	; 0x08
 36c:	11 86       	std	Z+9, r1	; 0x09
 36e:	12 86       	std	Z+10, r1	; 0x0a
 370:	13 86       	std	Z+11, r1	; 0x0b
 372:	80 e0       	ldi	r24, 0x00	; 0
    ret = false;
  }

  return ret;
}
 374:	08 95       	ret

00000376 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 376:	6f 92       	push	r6
 378:	7f 92       	push	r7
 37a:	8f 92       	push	r8
 37c:	9f 92       	push	r9
 37e:	af 92       	push	r10
 380:	bf 92       	push	r11
 382:	cf 92       	push	r12
 384:	df 92       	push	r13
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
 394:	39 01       	movw	r6, r18
 396:	4a 01       	movw	r8, r20
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if (p_node->p_buf == NULL) return false;
 398:	8c 85       	ldd	r24, Y+12	; 0x0c
 39a:	9d 85       	ldd	r25, Y+13	; 0x0d
 39c:	89 2b       	or	r24, r25
 39e:	e9 f1       	breq	.+122    	; 0x41a <qbufferWrite+0xa4>
 3a0:	ee 24       	eor	r14, r14
 3a2:	ff 24       	eor	r15, r15
 3a4:	87 01       	movw	r16, r14
 3a6:	32 c0       	rjmp	.+100    	; 0x40c <qbufferWrite+0x96>


  for (i=0; i<length; i++)
  {
    index      = p_node->ptr_in;
 3a8:	a8 80       	ld	r10, Y
 3aa:	b9 80       	ldd	r11, Y+1	; 0x01
 3ac:	ca 80       	ldd	r12, Y+2	; 0x02
 3ae:	db 80       	ldd	r13, Y+3	; 0x03
    next_index = p_node->ptr_in + 1;
 3b0:	a6 01       	movw	r20, r12
 3b2:	95 01       	movw	r18, r10
 3b4:	2f 5f       	subi	r18, 0xFF	; 255
 3b6:	3f 4f       	sbci	r19, 0xFF	; 255
 3b8:	4f 4f       	sbci	r20, 0xFF	; 255
 3ba:	5f 4f       	sbci	r21, 0xFF	; 255

    if (next_index == p_node->length)
 3bc:	88 85       	ldd	r24, Y+8	; 0x08
 3be:	99 85       	ldd	r25, Y+9	; 0x09
 3c0:	aa 85       	ldd	r26, Y+10	; 0x0a
 3c2:	bb 85       	ldd	r27, Y+11	; 0x0b
 3c4:	28 17       	cp	r18, r24
 3c6:	39 07       	cpc	r19, r25
 3c8:	4a 07       	cpc	r20, r26
 3ca:	5b 07       	cpc	r21, r27
 3cc:	21 f4       	brne	.+8      	; 0x3d6 <qbufferWrite+0x60>
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	50 e0       	ldi	r21, 0x00	; 0
    {
      next_index = 0;;
    }

    if (next_index != p_node->ptr_out)
 3d6:	8c 81       	ldd	r24, Y+4	; 0x04
 3d8:	9d 81       	ldd	r25, Y+5	; 0x05
 3da:	ae 81       	ldd	r26, Y+6	; 0x06
 3dc:	bf 81       	ldd	r27, Y+7	; 0x07
 3de:	28 17       	cp	r18, r24
 3e0:	39 07       	cpc	r19, r25
 3e2:	4a 07       	cpc	r20, r26
 3e4:	5b 07       	cpc	r21, r27
 3e6:	c9 f0       	breq	.+50     	; 0x41a <qbufferWrite+0xa4>
    {
      p_node->p_buf[index] = p_data[i];
 3e8:	ec 85       	ldd	r30, Y+12	; 0x0c
 3ea:	fd 85       	ldd	r31, Y+13	; 0x0d
 3ec:	ea 0d       	add	r30, r10
 3ee:	fb 1d       	adc	r31, r11
 3f0:	db 01       	movw	r26, r22
 3f2:	ae 0d       	add	r26, r14
 3f4:	bf 1d       	adc	r27, r15
 3f6:	8c 91       	ld	r24, X
 3f8:	80 83       	st	Z, r24
      p_node->ptr_in       = next_index;
 3fa:	28 83       	st	Y, r18
 3fc:	39 83       	std	Y+1, r19	; 0x01
 3fe:	4a 83       	std	Y+2, r20	; 0x02
 400:	5b 83       	std	Y+3, r21	; 0x03
  uint32_t i;

  if (p_node->p_buf == NULL) return false;


  for (i=0; i<length; i++)
 402:	08 94       	sec
 404:	e1 1c       	adc	r14, r1
 406:	f1 1c       	adc	r15, r1
 408:	01 1d       	adc	r16, r1
 40a:	11 1d       	adc	r17, r1
 40c:	e6 14       	cp	r14, r6
 40e:	f7 04       	cpc	r15, r7
 410:	08 05       	cpc	r16, r8
 412:	19 05       	cpc	r17, r9
 414:	48 f2       	brcs	.-110    	; 0x3a8 <qbufferWrite+0x32>
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	01 c0       	rjmp	.+2      	; 0x41c <qbufferWrite+0xa6>
 41a:	80 e0       	ldi	r24, 0x00	; 0
      break;
    }
  }

  return ret;
}
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	ff 90       	pop	r15
 426:	ef 90       	pop	r14
 428:	df 90       	pop	r13
 42a:	cf 90       	pop	r12
 42c:	bf 90       	pop	r11
 42e:	af 90       	pop	r10
 430:	9f 90       	pop	r9
 432:	8f 90       	pop	r8
 434:	7f 90       	pop	r7
 436:	6f 90       	pop	r6
 438:	08 95       	ret

0000043a <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 43a:	6f 92       	push	r6
 43c:	7f 92       	push	r7
 43e:	8f 92       	push	r8
 440:	9f 92       	push	r9
 442:	af 92       	push	r10
 444:	bf 92       	push	r11
 446:	cf 92       	push	r12
 448:	df 92       	push	r13
 44a:	ef 92       	push	r14
 44c:	ff 92       	push	r15
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	ec 01       	movw	r28, r24
 458:	39 01       	movw	r6, r18
 45a:	4a 01       	movw	r8, r20
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if (p_node->p_buf == NULL) return false;
 45c:	8c 85       	ldd	r24, Y+12	; 0x0c
 45e:	9d 85       	ldd	r25, Y+13	; 0x0d
 460:	89 2b       	or	r24, r25
 462:	e9 f1       	breq	.+122    	; 0x4de <qbufferRead+0xa4>
 464:	aa 24       	eor	r10, r10
 466:	bb 24       	eor	r11, r11
 468:	65 01       	movw	r12, r10
 46a:	32 c0       	rjmp	.+100    	; 0x4d0 <qbufferRead+0x96>


  for (i=0; i<length; i++)
  {
    index      = p_node->ptr_out;
 46c:	2c 81       	ldd	r18, Y+4	; 0x04
 46e:	3d 81       	ldd	r19, Y+5	; 0x05
 470:	4e 81       	ldd	r20, Y+6	; 0x06
 472:	5f 81       	ldd	r21, Y+7	; 0x07
    next_index = p_node->ptr_out + 1;
 474:	79 01       	movw	r14, r18
 476:	8a 01       	movw	r16, r20
 478:	08 94       	sec
 47a:	e1 1c       	adc	r14, r1
 47c:	f1 1c       	adc	r15, r1
 47e:	01 1d       	adc	r16, r1
 480:	11 1d       	adc	r17, r1

    if (next_index == p_node->length)
 482:	88 85       	ldd	r24, Y+8	; 0x08
 484:	99 85       	ldd	r25, Y+9	; 0x09
 486:	aa 85       	ldd	r26, Y+10	; 0x0a
 488:	bb 85       	ldd	r27, Y+11	; 0x0b
 48a:	e8 16       	cp	r14, r24
 48c:	f9 06       	cpc	r15, r25
 48e:	0a 07       	cpc	r16, r26
 490:	1b 07       	cpc	r17, r27
 492:	19 f4       	brne	.+6      	; 0x49a <qbufferRead+0x60>
 494:	ee 24       	eor	r14, r14
 496:	ff 24       	eor	r15, r15
 498:	87 01       	movw	r16, r14
    {
      next_index = 0;
    }

    if (index != p_node->ptr_in)
 49a:	88 81       	ld	r24, Y
 49c:	99 81       	ldd	r25, Y+1	; 0x01
 49e:	aa 81       	ldd	r26, Y+2	; 0x02
 4a0:	bb 81       	ldd	r27, Y+3	; 0x03
 4a2:	28 17       	cp	r18, r24
 4a4:	39 07       	cpc	r19, r25
 4a6:	4a 07       	cpc	r20, r26
 4a8:	5b 07       	cpc	r21, r27
 4aa:	c9 f0       	breq	.+50     	; 0x4de <qbufferRead+0xa4>
    {
      p_data[i]       = p_node->p_buf[index];
 4ac:	fb 01       	movw	r30, r22
 4ae:	ea 0d       	add	r30, r10
 4b0:	fb 1d       	adc	r31, r11
 4b2:	ac 85       	ldd	r26, Y+12	; 0x0c
 4b4:	bd 85       	ldd	r27, Y+13	; 0x0d
 4b6:	a2 0f       	add	r26, r18
 4b8:	b3 1f       	adc	r27, r19
 4ba:	8c 91       	ld	r24, X
 4bc:	80 83       	st	Z, r24
      p_node->ptr_out = next_index;
 4be:	ec 82       	std	Y+4, r14	; 0x04
 4c0:	fd 82       	std	Y+5, r15	; 0x05
 4c2:	0e 83       	std	Y+6, r16	; 0x06
 4c4:	1f 83       	std	Y+7, r17	; 0x07
  uint32_t i;

  if (p_node->p_buf == NULL) return false;


  for (i=0; i<length; i++)
 4c6:	08 94       	sec
 4c8:	a1 1c       	adc	r10, r1
 4ca:	b1 1c       	adc	r11, r1
 4cc:	c1 1c       	adc	r12, r1
 4ce:	d1 1c       	adc	r13, r1
 4d0:	a6 14       	cp	r10, r6
 4d2:	b7 04       	cpc	r11, r7
 4d4:	c8 04       	cpc	r12, r8
 4d6:	d9 04       	cpc	r13, r9
 4d8:	48 f2       	brcs	.-110    	; 0x46c <qbufferRead+0x32>
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <qbufferRead+0xa6>
 4de:	80 e0       	ldi	r24, 0x00	; 0
      break;
    }
  }

  return ret;
}
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	ff 90       	pop	r15
 4ea:	ef 90       	pop	r14
 4ec:	df 90       	pop	r13
 4ee:	cf 90       	pop	r12
 4f0:	bf 90       	pop	r11
 4f2:	af 90       	pop	r10
 4f4:	9f 90       	pop	r9
 4f6:	8f 90       	pop	r8
 4f8:	7f 90       	pop	r7
 4fa:	6f 90       	pop	r6
 4fc:	08 95       	ret

000004fe <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	fc 01       	movw	r30, r24
  uint32_t length;


  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 508:	20 85       	ldd	r18, Z+8	; 0x08
 50a:	31 85       	ldd	r19, Z+9	; 0x09
 50c:	42 85       	ldd	r20, Z+10	; 0x0a
 50e:	53 85       	ldd	r21, Z+11	; 0x0b
 510:	60 81       	ld	r22, Z
 512:	71 81       	ldd	r23, Z+1	; 0x01
 514:	82 81       	ldd	r24, Z+2	; 0x02
 516:	93 81       	ldd	r25, Z+3	; 0x03
 518:	62 0f       	add	r22, r18
 51a:	73 1f       	adc	r23, r19
 51c:	84 1f       	adc	r24, r20
 51e:	95 1f       	adc	r25, r21
 520:	e4 80       	ldd	r14, Z+4	; 0x04
 522:	f5 80       	ldd	r15, Z+5	; 0x05
 524:	06 81       	ldd	r16, Z+6	; 0x06
 526:	17 81       	ldd	r17, Z+7	; 0x07
 528:	6e 19       	sub	r22, r14
 52a:	7f 09       	sbc	r23, r15
 52c:	80 0b       	sbc	r24, r16
 52e:	91 0b       	sbc	r25, r17
 530:	0e 94 a9 02 	call	0x552	; 0x552 <__udivmodsi4>

  return length;
}
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
 538:	ff 90       	pop	r15
 53a:	ef 90       	pop	r14
 53c:	08 95       	ret

0000053e <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node)
{
 53e:	fc 01       	movw	r30, r24
  p_node->ptr_in  = 0;
 540:	10 82       	st	Z, r1
 542:	11 82       	std	Z+1, r1	; 0x01
 544:	12 82       	std	Z+2, r1	; 0x02
 546:	13 82       	std	Z+3, r1	; 0x03
  p_node->ptr_out = 0;
 548:	14 82       	std	Z+4, r1	; 0x04
 54a:	15 82       	std	Z+5, r1	; 0x05
 54c:	16 82       	std	Z+6, r1	; 0x06
 54e:	17 82       	std	Z+7, r1	; 0x07
}
 550:	08 95       	ret

00000552 <__udivmodsi4>:
 552:	a1 e2       	ldi	r26, 0x21	; 33
 554:	1a 2e       	mov	r1, r26
 556:	aa 1b       	sub	r26, r26
 558:	bb 1b       	sub	r27, r27
 55a:	fd 01       	movw	r30, r26
 55c:	0d c0       	rjmp	.+26     	; 0x578 <__udivmodsi4_ep>

0000055e <__udivmodsi4_loop>:
 55e:	aa 1f       	adc	r26, r26
 560:	bb 1f       	adc	r27, r27
 562:	ee 1f       	adc	r30, r30
 564:	ff 1f       	adc	r31, r31
 566:	a2 17       	cp	r26, r18
 568:	b3 07       	cpc	r27, r19
 56a:	e4 07       	cpc	r30, r20
 56c:	f5 07       	cpc	r31, r21
 56e:	20 f0       	brcs	.+8      	; 0x578 <__udivmodsi4_ep>
 570:	a2 1b       	sub	r26, r18
 572:	b3 0b       	sbc	r27, r19
 574:	e4 0b       	sbc	r30, r20
 576:	f5 0b       	sbc	r31, r21

00000578 <__udivmodsi4_ep>:
 578:	66 1f       	adc	r22, r22
 57a:	77 1f       	adc	r23, r23
 57c:	88 1f       	adc	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	1a 94       	dec	r1
 582:	69 f7       	brne	.-38     	; 0x55e <__udivmodsi4_loop>
 584:	60 95       	com	r22
 586:	70 95       	com	r23
 588:	80 95       	com	r24
 58a:	90 95       	com	r25
 58c:	9b 01       	movw	r18, r22
 58e:	ac 01       	movw	r20, r24
 590:	bd 01       	movw	r22, r26
 592:	cf 01       	movw	r24, r30
 594:	08 95       	ret

00000596 <_exit>:
 596:	f8 94       	cli

00000598 <__stop_program>:
 598:	ff cf       	rjmp	.-2      	; 0x598 <__stop_program>
